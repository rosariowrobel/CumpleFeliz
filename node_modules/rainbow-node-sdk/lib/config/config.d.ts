/**
 * @enum
 * @name DataStoreType
 * @description
 *  used in SDK parameter "messagesDataStore": DataStoreType.NoStore, Parameter to override the storeMessages parameter of the SDK to define the behaviour of the storage of the messages (Enum DataStoreType in lib/config/config , default value "DataStoreType.UsestoreMessagesField" so it follows the storeMessages behaviour)
 *                          DataStoreType.NoStore Tell the server to NOT store the messages for delay distribution or for history of the bot and the contact.
 *                          DataStoreType.NoPermanentStore Tell the server to NOT store the messages for history of the bot and the contact. But being stored temporarily as a normal part of delivery (e.g. if the recipient is offline at the time of sending).
 *                          DataStoreType.StoreTwinSide The messages are fully stored.
 *                          DataStoreType.UsestoreMessagesField to follow the storeMessages SDK's parameter behaviour.
 */
declare enum DataStoreType {
    NoStore = "no-store",
    NoPermanentStore = "no-permanent-store",
    StoreTwinSide = "storetwinside",
    UsestoreMessagesField = "OldstoreMessagesUsed"
}
declare let conf: {
    sandbox: {
        http: {
            host: string;
            port: string;
            protocol: string;
        };
        xmpp: {
            host: string;
            port: string;
            protocol: string;
            timeBetweenXmppRequests: string;
        };
        s2s: {
            hostCallback: string;
            locallistenningport: string;
        };
    };
    official: {
        http: {
            host: string;
            port: string;
            protocol: string;
        };
        xmpp: {
            host: string;
            port: string;
            protocol: string;
            timeBetweenXmppRequests: string;
        };
        s2s: {
            hostCallback: string;
            locallistenningport: string;
        };
    };
    any: {
        http: {
            host: string;
            port: string;
            protocol: string;
        };
        xmpp: {
            host: string;
            port: string;
            protocol: string;
            timeBetweenXmppRequests: string;
        };
        s2s: {
            hostCallback: string;
            locallistenningport: string;
        };
    };
    logs: {
        path: string;
        level: string;
        color: boolean;
        enableConsoleLog: boolean;
        "system-dev": {
            internals: boolean;
            http: boolean;
        };
        zippedArchive: boolean;
        maxSize: string;
        maxFiles: any;
    };
    im: {
        sendReadReceipt: boolean;
        messageMaxLength: number;
        sendMessageToConnectedUser: boolean;
        conversationsRetrievedFormat: string;
        storeMessages: boolean;
        copyMessage: boolean;
        nbMaxConversations: number;
        rateLimitPerHour: number;
        messagesDataStore: DataStoreType;
    };
    mode: string;
    debug: boolean;
    permitSearchFromPhoneBook: boolean;
    displayOrder: string;
    testOutdatedVersion: boolean;
    servicesToStart: {
        s2s: {
            start_up: boolean;
            optional: boolean;
        };
        presence: {
            start_up: boolean;
            optional: boolean;
        };
        contacts: {
            start_up: boolean;
            optional: boolean;
        };
        conversations: {
            start_up: boolean;
            optional: boolean;
        };
        im: {
            start_up: boolean;
            optional: boolean;
        };
        profiles: {
            start_up: boolean;
            optional: boolean;
        };
        groups: {
            start_up: boolean;
            optional: boolean;
        };
        bubbles: {
            start_up: boolean;
            optional: boolean;
        };
        telephony: {
            start_up: boolean;
            optional: boolean;
        };
        channels: {
            start_up: boolean;
            optional: boolean;
        };
        admin: {
            start_up: boolean;
            optional: boolean;
        };
        fileServer: {
            start_up: boolean;
            optional: boolean;
        };
        fileStorage: {
            start_up: boolean;
            optional: boolean;
        };
        calllog: {
            start_up: boolean;
            optional: boolean;
        };
        favorites: {
            start_up: boolean;
            optional: boolean;
        };
        invitation: {
            start_up: boolean;
            optional: boolean;
        };
        settings: {
            start_up: boolean;
            optional: boolean;
        };
    };
};
export { conf as config, DataStoreType };
