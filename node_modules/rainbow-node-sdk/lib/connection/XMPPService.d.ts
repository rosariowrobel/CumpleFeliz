import { XMPPUTils } from "../common/XMPPUtils";
declare const NameSpacesLabels: {
    ChatstatesNS: string;
    ReceiptNS: string;
    CallLogNamespace: string;
    CallLogAckNamespace: string;
    CallLogNotificationsNamespace: string;
    RsmNameSpace: string;
    Carbon2NameSpace: string;
    ApplicationNameSpace: string;
    RosterNameSpace: string;
    ClientNameSpace: string;
    PingNameSpace: string;
    DataNameSpace: string;
    MucNameSpace: string;
    ReceiptsNameSpace: string;
    ChatestatesNameSpace: string;
    ContentNameSpace: string;
    MessageCorrectNameSpace: string;
    HintsNameSpace: string;
    OobNameSpace: string;
    Monitoring1NameSpace: string;
    CallService1NameSpace: string;
    MamNameSpace: string;
    MamNameSpaceTmp: string;
    AttentionNS: string;
};
declare class XMPPService {
    serverURL: any;
    host: any;
    eventEmitter: any;
    version: any;
    jid_im: any;
    jid_tel: any;
    jid_password: any;
    fullJid: any;
    jid: any;
    userId: any;
    initialPresence: any;
    xmppClient: any;
    logger: any;
    proxy: any;
    shouldSendReadReceipt: any;
    useXMPP: any;
    timeBetweenXmppRequests: any;
    isReconnecting: any;
    maxAttempts: any;
    idleTimer: any;
    pingTimer: any;
    forceClose: any;
    applicationId: any;
    generatedRandomId: any;
    hash: any;
    handleXMPPConnection: any;
    reconnect: any;
    fibonacciStrategy: any;
    serverUR: any;
    IQEventHandlerToken: any;
    IQEventHandler: any;
    xmppUtils: XMPPUTils;
    private shouldSendMessageToConnectedUser;
    private storeMessages;
    private copyMessage;
    private rateLimitPerHour;
    private messagesDataStore;
    ready: boolean;
    private readonly _startConfig;
    get startConfig(): {
        start_up: boolean;
        optional: boolean;
    };
    constructor(_xmpp: any, _im: any, _application: any, _eventEmitter: any, _logger: any, _proxy: any);
    start(withXMPP: any): Promise<unknown>;
    signin(account: any, headers: any): Promise<unknown>;
    stop(forceStop: any): Promise<unknown>;
    startOrResetIdleTimer(incomingStanza?: boolean): void;
    stopIdleTimer(): void;
    setPresence(show: any, status: any): any;
    enableCarbon(): Promise<unknown>;
    sendChatMessage(message: any, jid: any, lang: any, content: any, subject: any, answeredMsg: any): Promise<unknown>;
    sendChatMessageToBubble(message: any, jid: any, lang: any, content: any, subject: any, answeredMsg: any, attention: any): Promise<unknown>;
    sendCorrectedChatMessage(conversation: any, originalMessage: any, data: any, origMsgId: any, lang: any): Promise<string>;
    markMessageAsRead(message: any): Promise<unknown>;
    sendChatExistingFSMessage(message: any, jid: any, lang: any, fileDescriptor: any): Promise<unknown>;
    sendChatExistingFSMessageToBubble(message: any, jid: any, lang: any, fileDescriptor: any): Promise<unknown>;
    sendIsTypingState(conversation: any, isTypingState: any): Promise<unknown>;
    getRosters(): void;
    /****************************************************/
    /**            XMPP ROSTER MANAGEMENT              **/
    /****************************************************/
    sendSubscription(contact: any): Promise<void>;
    sendSubscribeInvitation(jid: any): Promise<any>;
    sendInitialBubblePresence(jid: any): any;
    sendUnavailableBubblePresence(jid: any): void;
    getAgentStatus(): Promise<unknown>;
    /**
     *
      * @param useAfter
     * @returns {Promise<void>}
     */
    sendGetCallLogHistoryPage(useAfter: any): Promise<any>;
    deleteOneCallLog(id: any): Promise<any>;
    deleteCallLogsForContact(jid: any): Promise<any>;
    deleteAllCallLogs(): Promise<any>;
    markCallLogAsRead(id: any): Promise<any>;
    markAllCallsLogsAsRead(callLogs: any): Promise<any[]>;
    deleteAllMessageInOneToOneConversation(conversationId: any): Promise<any>;
    getErrorMessage(data: any, actionLabel: any): string;
    getTelephonyState(secondary: any): Promise<unknown>;
    sendPing(): void;
    mamQuery(jid: any, options: any): void;
    mamQueryMuc(jid: any, to: any, options: any): void;
    mamDelete(options: any): void;
    voiceMessageQuery(jid: any): Promise<unknown>;
}
export { XMPPService, NameSpacesLabels };
