import { XMPPService } from "../XMPPService";
export {};
declare const GenericHandler: any;
/*********************************************************************/
/** PRIVATE CONSTRUCTOR                                             **/
/*********************************************************************/
declare class CallLogEventHandler extends GenericHandler {
    MESSAGE: any;
    IQ_RESULT: any;
    IQ_ERROR: any;
    IQ_CALLLOG: any;
    CALLLOG_ACK: any;
    IQ_CALLOG_NOTIFICATION: any;
    calllogService: any;
    contactService: any;
    profileService: any;
    telephonyService: any;
    callLogsPromises: any;
    calllogs: any;
    onIqCallLogReceived: any;
    onCallLogAckReceived: any;
    onIqCallLogNotificationReceived: any;
    logger: any;
    callLogs: any;
    constructor(xmppService: XMPPService, calllogService: any, contactService: any, profileService: any, telephonyService: any);
    /**
     * Method isMediaPillarJid
     * @public
     * @param {string} fromJid the from jid
     * @returns {boolean} true if it is the media pillar Jid
     * @memberof WebrtcGatewayService
     */
    isMediaPillarJid(fromJid: any): boolean;
    removeCallLogsForUser(jid: any): void;
    createCallLogFromMessage(message: any): Promise<any>;
    logAlreadyExists(log: any): boolean;
    orderCallLogsFunction(): any;
    getMissedCallLogCounter(): number;
    callLogAckUpdate(id: any): void;
    simplifyCallLogs(callLogs: any): any[];
    resetCallLogs(): Promise<void>;
    fusionInformation(callLogs: any): any[];
}
export { CallLogEventHandler };
