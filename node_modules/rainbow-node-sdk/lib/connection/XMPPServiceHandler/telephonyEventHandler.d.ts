import { XMPPService } from "../XMPPService";
export {};
declare const GenericHandler: any;
declare class TelephonyEventHandler extends GenericHandler {
    MESSAGE: any;
    IQ_RESULT: any;
    IQ_ERROR: any;
    telephonyService: any;
    contactService: any;
    promiseQueue: any;
    _profiles: any;
    onIqResultReceived: any;
    onIqGetPbxAgentStatusReceived: any;
    onMessageReceived: any;
    onInitiatedEvent: any;
    onOriginatedEvent: any;
    getCall: any;
    onDeliveredEvent: any;
    onEstablishedEvent: any;
    onRetrieveCallEvent: any;
    onClearCallEvent: any;
    onHeldEvent: any;
    onQueuedEvent: any;
    onDivertedEvent: any;
    onTransferEvent: any;
    getOrCreateCall: any;
    onConferenceEvent: any;
    onVoiceMessageEvent: any;
    onUpDateCallEvent: any;
    onFailCallEvent: any;
    onCallForwardedEvent: any;
    onNomadicStatusEvent: any;
    createConferenceCall: any;
    logger: any;
    eventEmitter: any;
    constructor(xmppService: XMPPService, telephonyService: any, contactService: any, profileService: any);
    /*********************************************************************/
    /** CALL UPDATE STUFF                                               **/
    /*********************************************************************/
    /**
     * Method analyzeContactChange
     * Analyse if a setContact has to be done following situation
     * @public
     * @param jid [required] jid from PCG
     * @param phoneNumber [required] phone number from PCG
     * @param call [required] the call to update
     * @returns object:{ updateContactToBeDone : boolean, searchOutlookToBeDone :boolean}
     *  updateContactToBeDone true if the contact has to be updated in the call (by setContact)
     *  searchOutlookToBeDone true if an outlook search has to be performed to resolve call identity
     * @memberof TelephonyServiceEventHandler
     */
    analyzeContactChange(jid: any, phoneNumber: any, call: any): {
        updateContactToBeDone: boolean;
    };
    /**
     * Method updateCallContact
     * @public
     * @param jid [required] jid from PCG
     * @param phoneNumber [required] phone number from PCG
     * @param actionElemName [required] name of the action event
     * @param call [required] the call to update
     * @returns {ng.IPromise<{}>} status promise
     * @memberof TelephonyServiceEventHandler
     */
    updateCallContact(jid: any, phoneNumber: any, actionElemName: any, call: any): any;
    makeUpdateContact(call: any, contact: any, phoneNumber: any, actionElemName: any): void;
}
export { TelephonyEventHandler };
