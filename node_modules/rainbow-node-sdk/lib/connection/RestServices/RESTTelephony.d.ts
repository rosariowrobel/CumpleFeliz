declare class RESTTelephony {
    http: any;
    logger: any;
    _logger: any;
    evtEmitter: any;
    constructor(evtEmitter: any, logger: any);
    start(http: any): Promise<unknown>;
    makeCall(requestHeader: any, contact: any, phoneInfo: any): Promise<unknown>;
    releaseCall(requestHeader: any, call: any): Promise<unknown>;
    makeConsultationCall(requestHeader: any, callId: any, contact: any, phoneInfo: any): Promise<unknown>;
    answerCall(requestHeader: any, call: any): Promise<unknown>;
    holdCall(requestHeader: any, call: any): Promise<unknown>;
    retrieveCall(requestHeader: any, call: any): Promise<unknown>;
    deflectCallToVM(requestHeader: any, call: any, VMInfos: any): Promise<unknown>;
    deflectCall(requestHeader: any, call: any, VMInfos: any): Promise<unknown>;
    transfertCall(requestHeader: any, activeCall: any, heldCall: any): Promise<unknown>;
    conferenceCall(requestHeader: any, activeCall: any, heldCall: any): Promise<unknown>;
    forwardToDevice(requestHeader: any, contact: any, phoneInfo: any): Promise<unknown>;
    getForwardStatus(requestHeader: any): Promise<unknown>;
    /**
     * @public
     * @method sendDtmf
     * @description
     *      send dtmf to the remote party
     * @param requestHeader
     * @param callId
     * @param deviceId
     * @param data
     */
    sendDtmf(requestHeader: any, callId: any, deviceId: any, data: any): Promise<unknown>;
    getNomadicStatus(requestHeader: any): Promise<unknown>;
    nomadicLogin(requestHeader: any, data: any): Promise<unknown>;
    logon(requestHeader: any, endpointTel: any, agentId: any, password: any, groupId: any): Promise<unknown>;
    logoff(requestHeader: any, endpointTel: any, agentId: any, password: any, groupId: any): Promise<unknown>;
    withdrawal(requestHeader: any, agentId: any, groupId: any, status: any): Promise<unknown>;
    wrapup(requestHeader: any, agentId: any, groupId: any, password: any, status: any): Promise<unknown>;
}
export { RESTTelephony };
