/// <reference types="node" />
export {};
import { EventEmitter } from "events";
import { Core } from "../Core";
import { Logger } from "./Logger";
/**
 * @class
 * @name Events
 * @description
 *      This module fires every events that come from Rainbow.<br/>
 *      To receive them, you need to subscribe individually to each of the following events<br/>
 * @fires Events#rainbow_onrainbowversionwarning
 * @fires Events#rainbow_onmessageserverreceiptreceived
 * @fires Events#rainbow_onmessagereceiptreceived
 * @fires Events#rainbow_onmessagereceiptreadreceived
 * @fires Events#rainbow_onmessagereceived
 * @fires Events#rainbow_onsendmessagefailed
 * @fires Events#rainbow_oncontactpresencechanged
 * @fires Events#rainbow_onpresencechanged
 * @fires Events#rainbow_onconversationremoved
 * @fires Events#rainbow_onconversationchanged
 * @fires Events#rainbow_onallmessagedremovedfromconversationreceived
 * @fires Events#rainbow_onchatstate
 * @fires Events#rainbow_oncontactinformationchanged
 * @fires Events#rainbow_onuserinvitereceived
 * @fires Events#rainbow_onuserinviteaccepted
 * @fires Events#rainbow_onuserinvitecanceled
 * @fires Events#rainbow_onusercontactremoved
 * @fires Events#rainbow_onbubbleaffiliationchanged
 * @fires Events#rainbow_onbubbleownaffiliationchanged
 * @fires Events#rainbow_onbubbleinvitationreceived
 * @fires Events#rainbow_onbubbleconferencestartedreceived
 * @fires Events#rainbow_onbubbleconferencestoppedreceived
 * @fires Events#rainbow_onbubblecustomDatachanged
 * @fires Events#rainbow_onbubbletopicchanged
 * @fires Events#rainbow_onbubbleprivilegechanged
 * @fires Events#rainbow_onbubbleavatarchanged
 * @fires Events#rainbow_onbubblenamechanged
 * @fires Events#rainbow_ongroupcreated
 * @fires Events#rainbow_ongroupdeleted
 * @fires Events#rainbow_ongroupupdated
 * @fires Events#rainbow_onuseraddedingroup
 * @fires Events#rainbow_onuserremovedfromgroup
 * @fires Events#rainbow_onstarted
 * @fires Events#rainbow_onstopped
 * @fires Events#rainbow_onready
 * @fires Events#rainbow_onerror
 * @fires Events#rainbow_onconnected
 * @fires Events#rainbow_onconnectionerror
 * @fires Events#rainbow_ondisconnected
 * @fires Events#rainbow_onreconnecting
 * @fires Events#rainbow_onfailed
 * @fires Events#rainbow_oncallupdated
 * @fires Events#rainbow_onconferenced
 * @fires Events#rainbow_ontelephonystatuschanged
 * @fires Events#rainbow_onnomadicstatusevent
 * @fires Events#rainbow_onvoicemessageupdated
 * @fires Events#rainbow_oncallforwarded
 * @fires Events#rainbow_onchannelmessagereceived
 * @fires Events#rainbow_onchannelmessagedeletedreceived
 * @fires Events#rainbow_onprofilefeatureupdated
 * @fires Events#rainbow_onfilecreated
 * @fires Events#rainbow_onfileupdated
 * @fires Events#rainbow_onfiledeleted
 * @fires Events#rainbow_onthumbnailcreated
 * @fires Events#rainbow_onchannelupdated
 * @fires Events#rainbow_onchannelusersubscription
 * @fires Events#rainbow_onmediapropose
 * @fires Events#rainbow_oncalllogupdated
 * @fires Events#rainbow_oncalllogackupdated
 * @fires Events#rainbow_onfavoritecreated
 * @fires Events#rainbow_onfavoritedeleted
*/
declare class Events {
    _logger: Logger;
    _filterCallback: Function;
    _evReceiver: EventEmitter;
    _evPublisher: EventEmitter;
    _core: Core;
    constructor(_logger: Logger, _filterCallback: Function);
    get iee(): EventEmitter;
    get eee(): EventEmitter;
    /**
     * @method on
     * @public
     * @memberof Events
     * @instance
     * @param {string} event The event name to subscribe
     * @param {function} callback The function called when the even is fired
     * @return {Object} The events instance to be able to chain subscriptions
     * @description
     *      Subscribe to an event
     */
    on(event: any, callback: any): EventEmitter;
    /**
     * @method once
     * @public
     * @memberof Events
     * @instance
     * @param {string} event The event name to subscribe
     * @param {function} callback The function called when the even is fired
     * @return {Object} The events instance to be able to chain subscriptions
     * @description
     *      Subscribe to an event only one time (fired only the first time)
     */
    once(event: string, callback: (...args: any[]) => void): EventEmitter;
    publish(event: string, data: any): void;
    /**
     * @method publishEvent
     * @private
     * @memberof Events
     * @instance
     * @param {...*} args all arguments for the event
     * @return nothing
     * @description
     *      Add "rainbow_on" prefix to event name, print it human readable, and raises it.
     */
    publishEvent(...args: any[]): void;
    setCore(_core: Core): void;
}
export { Events };
