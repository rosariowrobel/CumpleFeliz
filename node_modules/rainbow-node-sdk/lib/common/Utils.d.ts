declare let makeId: (n: any) => string;
declare let createPassword: (size: any) => string;
declare let isAdmin: (roles: any) => boolean;
declare class Deferred {
    resolve: any;
    reject: any;
    promise: any;
    constructor();
}
declare let isSuperAdmin: (roles: any) => boolean;
declare let anonymizePhoneNumber: (number: any) => any;
declare let setTimeoutPromised: (time: any) => Promise<unknown>;
/**
 * @description
 * function to wait for a condition for a few time before it is resolved of rejected.
 * To be used with asunchrone function :
 * myFunction() is the code using until function.
 *
 * async function myFunction(number) {
  *    let x=number;
 * ... more initializations
 *
 *    await until(_ => flag == true);
 * ...
 * ... do something when until is resolved/rejected
 * }
 *
 * @param conditionFunction
 * @returns {Promise<any>}
 */
declare function until(conditionFunction: Function, labelOfWaitingCondition: string, waitMsTimeBeforeReject?: number): Promise<unknown>;
declare function orderByFilter(originalArray: any, filterFct: any, flag: any, sortFct: any): any[];
declare function isStart_upService(serviceoptions: any): boolean;
declare function isStarted(_methodsToIgnoreStartedState?: Array<string>): any;
declare function logEntryExit(LOG_ID: any): any;
/**
 * @private
 * @param avatarImg
 * @param maxWidth
 * @param maxHeight
 */
declare function resizeImage(avatarImg: any, maxWidth: any, maxHeight: any): Promise<unknown>;
/**
 * @private
 * @param image
 */
declare function getBinaryData(image: any): {
    type: any;
    data: Uint8Array;
};
/**
 *
 * @param max The greater number which can be generated. If not defined the default value is 10.
 * @description
 *      generate an integer number between 1 and max value param.
 * @return {number} Return an integer number between 1 and max value param.
 */
declare function getRandomInt(max: any): number;
export { makeId, createPassword, isAdmin, anonymizePhoneNumber, Deferred, isSuperAdmin, setTimeoutPromised, until, orderByFilter, isStart_upService, isStarted, logEntryExit, resizeImage, getBinaryData, getRandomInt };
