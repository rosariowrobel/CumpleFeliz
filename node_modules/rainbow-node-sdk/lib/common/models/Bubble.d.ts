import { Contact } from "./Contact";
export {};
/**
 * @class
 * @name Bubble
 * @description
 *      This class represents a Bubble. <br>
 *		A bubble is an interaction between several participants based on IM media. A bubble is described by a name and a description.<br>
 *		Like for one-to-one conversation, A conversation within a bubble never ends and all interactions done can be retrieved. <br>
 */
declare class Bubble {
    id: any;
    name: any;
    topic: any;
    jid: any;
    creator: any;
    history: any;
    users: any;
    creationDate: any;
    visibility: any;
    customData: any;
    isActive: any;
    conference: any;
    disableNotifications: boolean;
    lastAvatarUpdateDate: null;
    guestEmails: any[];
    confEndpoints: [];
    activeUsersCounter: number;
    avatar: String;
    organizers: Array<any>;
    members: Array<any>;
    static RoomUserStatus: {
        INVITED: string;
        ACCEPTED: string;
        UNSUBSCRIBED: string;
        REJECTED: string;
        DELETED: string;
    };
    autoRegister: any;
    lastActivityDate: any;
    /**
     * @private
     * @readonly
     * @enum {number}
     */
    static Type: {
        PRIVATE: number;
        PUBLIC: number;
    };
    /**
     * @public
     * @readonly
     * @enum {String}
     */
    static Privilege: {
        /** User level */
        USER: string;
        /** Moderator level */
        MODERATOR: string;
        /** Guest level */
        GUEST: string;
    };
    /**
     * @public
     * @readonly
     * @enum {String}
     */
    static History: {
        /** Full bubble history is accessible for newcomers */
        ALL: string;
        /** No history is accessible for newcomers, only new messages posted */
        NONE: string;
    };
    /**
     * @description the creator (owner ) of the bubble.
     */
    ownerContact: Contact;
    owner: boolean;
    autoAcceptInvitation: boolean;
    tags: Array<any>;
    constructor(_id: any, _name: any, _topic: any, _jid: any, _creator: any, _history: any, _users: any, _creationDate: any, _visibility: any, _customData: any, _isActive: any, _conference: any, _disableNotifications: boolean, _lastAvatarUpdateDate: any, _guestEmails: [], _confEndpoints: [], _activeUsersCounter: number, _autoRegister: boolean, _lastActivityDate: any, _autoAcceptInvitation?: boolean, _tags?: Array<any>, _avatarDomain?: String);
    /**
     * Method helper to know if room is a meeting
     * @private
     */
    isMeetingBubble(): boolean;
    getStatusForUser(userId: any): any;
    setUsers(_users: any): void;
    updateBubble(data: any, contactsService: any): Promise<this>;
    /**
     * @function
     * @public
     * @name BubbleFactory
     * @description
     * This class is used to create a bubble from data object
     */
    static BubbleFactory(avatarDomain: any, contactsService: any): (data: any) => Promise<Bubble>;
}
export { Bubble };
