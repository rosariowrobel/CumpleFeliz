import { MEDIATYPE } from "../../connection/RESTService";
export {};
/**
 * @class
 * @private
 * @name Conference
 * @description
 *      This class is used to represent a conference
 */
declare class Conference {
    private _companyId;
    private _id;
    private _mediaType;
    private _name;
    private _passCodes;
    private _scheduled;
    private _lastUpdateDate;
    private _confDialOutDisabled;
    private _playEntryTone;
    private _userId;
    private _muteUponEntry;
    /**
     * @this Conference
     */
    constructor(companyId: any, // (String) Company unique identifier
    id: any, // (String) unique identifier of conference
    mediaType: any, // (String) mediaType of conference ("pstnAudio", "webrtc", "webrtcSharingOnly")
    name: any, // (String) name of conference
    passCodes: any, // (Array) list of passcodes
    scheduled: any, // (Boolean) true if it is a scheduled meeting, false otherwise
    lastUpdateDate: any, // (String) last update date of conference (e.g. 2018-06-20T09:08:00.000Z)
    userId: any, // (String) user unique identifier
    confDialOutDisabled: any, // (Boolean) true if dialOut from PGi is disabled
    playEntryTone: any, // (Boolean) A tone is played when participant enters the conference.
    muteUponEntry: any);
    static createFromData(data: any): Conference;
    /**
     * @private
     * @property {string} updateFromData Allow to update an existing conference with data from server
     * @readonly
     */
    updateFromData(data: any): void;
    get companyId(): string;
    set companyId(value: string);
    get id(): string;
    set id(value: string);
    get mediaType(): MEDIATYPE;
    set mediaType(value: MEDIATYPE);
    get name(): string;
    set name(value: string);
    get passCodes(): any;
    set passCodes(value: any);
    get scheduled(): boolean;
    set scheduled(value: boolean);
    get lastUpdateDate(): string;
    set lastUpdateDate(value: string);
    get confDialOutDisabled(): string;
    set confDialOutDisabled(value: string);
    get playEntryTone(): boolean;
    set playEntryTone(value: boolean);
    get userId(): string;
    set userId(value: string);
    get muteUponEntry(): boolean;
    set muteUponEntry(value: boolean);
}
export { Conference };
