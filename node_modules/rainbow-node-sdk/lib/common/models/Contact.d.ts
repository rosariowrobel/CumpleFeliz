export {};
/*************************************************************/
/*************************************************************/
/**
 * @public
 * @enum {string}
 * @readonly
 */
declare const AdminType: {
    /** Organization administrator */
    ORGANIZATION_ADMIN: string;
    /** Company administrator */
    COMPANY_ADMIN: string;
    /** Site administrator */
    SITE_ADMIN: string;
    /** No administrator right */
    UNDEFINED: string;
};
/**
 * @public
 * @enum {number}
 * @readonly
 */
declare const NameUpdatePrio: {
    NO_UPDATE_PRIO: number;
    OUTLOOK_UPDATE_PRIO: number;
    SERVER_UPDATE_PRIO: number;
    MAX_UPDATE_PRIO: number;
};
/**
 * @class
 * @name Contact
 * @description
 *      This class is used to represent a contact or the connected user <br/>
 *      A contact is defined by a set of public information (name, firstName, avatar...) and a set of private information that are only shared with contacts that are in the user's network or in the same company (email, phone numbers...)
 */
declare class Contact {
    id: any;
    _displayName: any;
    name: any;
    displayNameMD5: any;
    companyName: any;
    loginEmail: any;
    nickName: any;
    title: any;
    jobTitle: any;
    country: any;
    timezone: any;
    organisationId: any;
    siteId: any;
    companyId: any;
    jid_im: any;
    jid: any;
    jid_tel: any;
    jidtel: any;
    avatar: any;
    lastAvatarUpdateDate: any;
    lastUpdateDate: any;
    adminType: any;
    roles: any;
    phoneNumbers: any;
    phonePro: any;
    phoneProCan: any;
    phonePbx: any;
    phoneInternalNumber: any;
    pbxId: any;
    mobilePro: any;
    mobileProCan: any;
    phonePerso: any;
    phonePersoCan: any;
    mobilePerso: any;
    mobilePersoCan: any;
    voicemailNumber: any;
    emails: any;
    emailPro: any;
    emailPerso: any;
    lastName: any;
    firstName: any;
    isTerminated: any;
    language: any;
    presence: string;
    status: any;
    resources: any;
    nameUpdatePrio: any;
    initials: any;
    nickname: any;
    roster: any;
    initialized: any;
    colorIndex: any;
    color: any;
    _id: any;
    isInDefaultCompany: any;
    company: any;
    hasPhoneNumber: any;
    guestMode: any;
    openInviteId: any;
    userInfo1: null;
    userInfo2: null;
    ask: string;
    subscription: string;
    temp: boolean;
    constructor();
    /**
     * @public
     * @readonly
     * @property {string} displayName The display name of the Contact
     * @instance
     */
    set displayName(value: any);
    get displayName(): any;
    setNameUpdatePrio(prio: any): void;
    getNameUpdatePrio(): any;
    displayNameForLog(): any;
    computeCompleteDisplayName(firstName: any, lastName: any): void;
    computeDisplayName(): void;
    updateName(firstName: any, lastName: any): void;
    updateFromUserData(userData: any): void;
    isGuest(): any;
}
export { Contact as Contact, AdminType as AdminType, NameUpdatePrio as NameUpdatePrio };
