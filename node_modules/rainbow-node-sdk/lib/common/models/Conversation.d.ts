/**
 * @class
 * @name Conversation
 * @description
 *      This class represents a conversation <br>
 *		A conversation is a "long" interaction (aka the "long tail") between the user ane one or several contacts (Rainbow users or not) based on the IM media if the recipients are Rainbow users. <br>
 *		A conversation never ends and all interactions done can be retrieved. <br>
 */
declare class Conversation {
    id: any;
    dbId: any;
    type: any;
    owner: any;
    contact: any;
    bubble: any;
    capabilities: any;
    avatar: any;
    presenceStatus: any;
    name: any;
    filterName: any;
    missedCounter: any;
    missedCalls: any;
    messages: any;
    participantStatuses: any;
    draft: any;
    uploadFile: any;
    status: any;
    historyIndex: any;
    historyMessages: any;
    historyDefered: any;
    historyComplete: any;
    lastModification: any;
    creationDate: any;
    lastMessageText: any;
    lastMessageSender: any;
    pip: any;
    videoCall: any;
    audioCall: any;
    pstnConferenceSession: any;
    webConferenceSession: any;
    isMutedAudio: any;
    isMutedVideo: any;
    infoVisible: any;
    muted: any;
    randomBase: any;
    messageId: any;
    currentHistoryId: any;
    static Status: any;
    static Type: any;
    private static randomBase;
    private static messageId;
    preload: boolean;
    isFavorite: boolean;
    constructor(conversationId: any);
    /**
     * @private
     * @method addMessage
     * @memberof Conversation
     * @instance
     */
    addMessage(message: any): any;
    /*************************************************************/
    /*************************************************************/
    static createOneToOneConversation(participant: any): Conversation;
    static createBubbleConversation(bubble: any): Conversation;
    generateRandomID(): any;
    static getUniqueMessageId(): string;
    /*************************************************************/
    /*************************************************************/
    static stringToStatus(status: any): any;
    /*************************************************************/
    /*************************************************************/
    reset(): void;
    getMessageById(messId: any): any;
    getlastEditableMsg(): any;
}
export { Conversation };
