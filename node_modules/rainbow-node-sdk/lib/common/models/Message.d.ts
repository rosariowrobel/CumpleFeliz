export {};
/**
 * @class
 * @name Message
 * @description
 *      This class is used to represent a message in a conversation <br/>
 *      A message is exchanged when discussing in One-to-One or in a Bubble.
 */
declare class Message {
    id: any;
    fromJid: any;
    side: any;
    resource: any;
    date: any;
    toJid: any;
    type: any;
    content: any;
    status: any;
    receiptStatus: any;
    lang: any;
    fileId: any;
    cc: any;
    cctype: any;
    isEvent: any;
    event: any;
    alternativeContent: any;
    isMarkdown: any;
    subject: any;
    oob: any;
    fromBubbleJid: any;
    fromBubbleUserJid: any;
    fileTransfer: any;
    /**
     * @public
     * @enum {number}
     * @readonly
     */
    static Type: any;
    /**
     * @public
     * @enum {number}
     * @readonly
     */
    static ReceiptStatus: any;
    /**
     * @public
     * @enum {string}
     * @readonly
     */
    static Side: any;
    /**
     * @private
     */
    static ReceiptStatusText: string[];
    attention: boolean;
    constructor(id: any, type: any, date: any, from: any, side: any, data: any, status: any, fileId?: any, isMarkdown?: any, subject?: any, attention1?: boolean);
    /**
     * @private
     * @method
     * @instance
     */
    static create(id: any, date: any, from: any, side: any, data: any, status: any, isMarkdown?: any, subject?: any): Message;
    /**
     * @private
     * @method
     * @instance
     */
    static createFileSharingMessage(id: any, date: any, from: any, side: any, data: any, status: any, fileId: any): Message;
    /**
     * @private
     * @method
     * @instance
     */
    static createWebRTCMessage(id: any, date: any, from: any, side: any, data: any, status: any): Message;
    /**
     * @private
     * @method
     * @instance
     */
    static createFTMessage(id: any, date: any, from: any, side: any, data: any, status: any, fileTransfer: any): Message;
    /**
     * @private
     * @method
     * @instance
     */
    static createBubbleAdminMessage(id: any, date: any, from: any, type: any): Message;
    /**
     * @private
     * @method
     * @instance
     */
    static createRecordingAdminMessage(id: any, date: any, from: any, type: any, cmd: any): Message;
    /**
     * Method extract fileId part of URL
     *
     * @private
     * @param {string} url
     * @returns {string}
     *
     * @memberof Conversation
     */
    static extractFileIdFromUrl(url: any): any;
    updateBubble(data: any): this;
    /**
     * @function
     * @public
     * @name MessageFactory
     * @description
     * This class is used to create a message from data object
     */
    static MessageFactory(): (data: any) => Message;
}
export { Message };
