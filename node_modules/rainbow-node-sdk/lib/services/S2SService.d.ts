declare class S2SService {
    private serverURL;
    private host;
    private eventEmitter;
    version: any;
    jid_im: any;
    jid_tel: any;
    jid_password: any;
    fullJid: any;
    jid: any;
    userId: any;
    private logger;
    private proxy;
    private xmppUtils;
    private generatedRandomId;
    private hash;
    private useS2S;
    private _rest;
    private hostCallback;
    private app;
    private locallistenningport;
    private s2sEventHandler;
    private _contacts;
    private options;
    private _conversations;
    ready: boolean;
    private readonly _startConfig;
    get startConfig(): {
        start_up: boolean;
        optional: boolean;
    };
    constructor(_s2s: any, _im: any, _application: any, _eventEmitter: any, _logger: any, _proxy: any, _startConfig: any);
    start(_options: any, _core: any): Promise<unknown>;
    /**
     * @private
     * @name signin
     * @param account
     * @param headers
     */
    signin(account: any, headers: any): Promise<unknown>;
    /**
     * @private
     * @param forceStop
     */
    stop(forceStop?: boolean): Promise<unknown>;
    /**
     * @public
     * @method listConnectionsS2S
     * @instance
     * @description
     *      List all the connected user's connexions.
     * @async
     * @return {Promise<Object, ErrorManager>}
     * @fulfil {Object} - List of connexions or an error object depending on the result
     * @category async
     */
    listConnectionsS2S(): Promise<any>;
    /**
     * @public
     * @method checkS2Sconnection
     * @instance
     * @description
     *      check the S2S connection with a head request.
     * @async
     * @return {Promise<Object, ErrorManager>}
     * @fulfil {Object} - List of connexions or an error object depending on the result
     * @category async
     */
    checkS2Sconnection(): Promise<any>;
    /**
     * @private
     * @method sendS2SPresence
     * @instance
     * @param {Object} obj Object {show, status} describing the presence :
     *  To put presence to cases :
     * "online":     {show = undefined, status = "mode=auto"}
     * "away": {show = "xa", status = "away"}
     * "dnd": {show = "dnd", status = ""}
     * "invisible": {show = "xa", status = ""}
     * @description
     *      set the presence of the connected user with s2s api .
     * @async
     * @return {Promise<Object, ErrorManager>}
     * @fulfil {Object} - List of connexions or an error object depending on the result
     * @category async
     */
    sendS2SPresence(obj: any): Promise<any>;
    /**
     * @private
     * @method deleteConnectionsS2S
     * @instance
     * @param {Array} connexions a List of connections S2S to delete
     * @description
     *      Delete one by one a list of S2S connections of the connected user.
     * @async
     * @return {Promise<Object, ErrorManager>}
     * @fulfil {Object} - List of connexions or an error object depending on the result
     * @category async
     */
    deleteConnectionsS2S(connexions: any): Promise<any>;
    /**
     * @public
     * @method deleteAllConnectionsS2S
     * @instance
     * @description
     *      Delete all the connected user's S2S connexions.
     * @async
     * @return {Promise<Object, ErrorManager>}
     * @fulfil {Object} - List of connexions or an error object depending on the result
     * @category async
     */
    deleteAllConnectionsS2S(): Promise<any>;
    /**
     * @private
     * @method loginS2S
     * @instance
     * @param {String} callback_url The web site which is the callback where the S2S events are sent by Rainbow server
     * @description
     *      Login to S2S event server the already connected user to REST API server.
     * @async
     * @return {Promise<Object, ErrorManager>}
     * @fulfil {Object} - List of connexions or an error object depending on the result
     * @category async
     */
    loginS2S(callback_url: any): Promise<any>;
    /**
     * @public
     * @method infoS2S
     * @instance
     * @param {String} s2sConnectionId The id of the S2S conneexion to retrieve informations about.
     * @description
     *      Get informations about a S2S connexions.
     * @async
     * @return {Promise<Object, ErrorManager>}
     * @fulfil {Object} - List of connexions or an error object depending on the result
     * @category async
     */
    infoS2S(s2sConnectionId: any): Promise<any>;
    /** S2S EVENTS */
    onS2SReady(event: any): Promise<void>;
    /** S2S methods */
    /**
     * @private
     * @method sendMessageInConversation
     * @instance
     * @param {String} conversationId
     * @param {String} msg The message object to send.
     * {
     *   "message": {
     *   "subject": "Greeting",
     *   "lang": "en",
     *   "contents": [
     *     {
     *       "type": "text/markdown",
     *       "data": "## Hello Bob"
     *     }
     *   ],
     *   "body": "Hello world"
     *   }
     * }
     * @description
     *      Send a message in a conversation. Note, corrected message is not yet supported.
     * @async
     * @return {Promise<Object, ErrorManager>}
     * @fulfil {Object} - List of connexions or an error object depending on the result
     * @category async
     */
    sendMessageInConversation(conversationId: any, msg: any): Promise<any>;
    /**
     * @private
     * @method joinRoom
     * @param {String} bubbleId The id of the bubble to open the conversation.
     * @param {string} role Enum: "member" "moderator" of your role in this room
     * @instance
     * @description
     *      send presence in S2S to join a bubble conversation
     * @async
     * @return {Promise<Object, ErrorManager>}
     * @fulfil {Object} - List of connexions or an error object depending on the result
     * @category async
     */
    joinRoom(bubbleId: any, role: ROOMROLE): Promise<any>;
}
declare enum ROOMROLE {
    MODERATOR = "moderator",
    MEMBER = "member"
}
export { S2SService, ROOMROLE };
