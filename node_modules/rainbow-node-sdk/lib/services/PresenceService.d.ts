import { Core } from "../Core";
import { PresenceLevel, PresenceRainbow } from "../common/models/PresenceRainbow";
export {};
declare class PresenceService {
    private _logger;
    private _xmpp;
    private _settings;
    private _presenceEventHandler;
    private _presenceHandlerToken;
    private _eventEmitter;
    private manualState;
    private _currentPresence;
    RAINBOW_PRESENCE_ONLINE: PresenceLevel.Online;
    RAINBOW_PRESENCE_DONOTDISTURB: PresenceLevel.Dnd;
    RAINBOW_PRESENCE_AWAY: PresenceLevel.Away;
    RAINBOW_PRESENCE_INVISIBLE: PresenceLevel.Invisible;
    ready: boolean;
    private readonly _startConfig;
    private _s2s;
    private _options;
    private _useXMPP;
    private _useS2S;
    private _rest;
    private _bubbles;
    get startConfig(): {
        start_up: boolean;
        optional: boolean;
    };
    constructor(_eventEmitter: any, _logger: any, _startConfig: any);
    start(_options: any, _core: Core): Promise<unknown>;
    stop(): Promise<unknown>;
    /**
     * @private
     * @method sendInitialPresence
     * @instance
     * @description
     *  Send the initial presence (online)
     * @return {ErrorManager.Ok} A promise containing the result
     */
    sendInitialPresence(): Promise<unknown>;
    /**
     * @public
     * @method setPresenceTo
     * @instance
     * @description
     *    Allow to change the presence of the connected user <br/>
     *    Only the following values are authorized: 'dnd', 'away', 'invisible' or 'online'
     * @param {String} presence The presence value to set i.e: 'dnd', 'away', 'invisible' ('xa' on server side) or 'online'
     * @async
     * @return {Promise<ErrorManager>}
     * @fulfil {ErrorManager} - ErrorManager object depending on the result (ErrorManager.getErrorManager().OK in case of success)
     * @category async
     */
    setPresenceTo(presence: any): Promise<unknown>;
    /**
     * @public
     * @method getUserConnectedPresence
     * @instance
     * @description
     *      Get user presence status calculated from events.
     */
    getUserConnectedPresence(): PresenceRainbow;
    /**
    * @private
    * @method _setUserPresenceStatus
    * @instance
    * @description
    *      Send user presence status and message to xmpp.
    */
    _setUserPresenceStatus(presenceRainbow: PresenceRainbow): Promise<unknown>;
    /**
     * @private
     * @method _sendPresenceFromConfiguration
     * @instance
     * @description
     *      Send user presence according to user settings presence.
     */
    _sendPresenceFromConfiguration(): Promise<unknown>;
    /**
     * @private
     * @method sendInitialBubblePresence
     * @instance
     * @param {Bubble} bubble The Bubble
     * @description
     *      Method called when receiving an invitation to join a bubble
     */
    sendInitialBubblePresence(bubble: any): Promise<unknown>;
    /**
     * @private
     * @method _onUserSettingsChanged
     * @instance
     * @description
     *      Method called when receiving an update on user settings
     */
    _onUserSettingsChanged(): void;
    /**
     * @private
     * @method _onPresenceChanged
     * @instance
     * @description
     *      Method called when receiving an update on user presence
     */
    _onPresenceChanged(presence: any): void;
}
export { PresenceService };
