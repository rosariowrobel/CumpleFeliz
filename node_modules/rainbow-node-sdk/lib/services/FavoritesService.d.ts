/// <reference types="node" />
import { Logger } from "../common/Logger";
export {};
import { Favorite } from '../common/models/Favorite';
import { EventEmitter } from "events";
import { Core } from "../Core";
declare class FavoritesService {
    private _eventEmitter;
    private _logger;
    private started;
    private _initialized;
    private _xmpp;
    private _rest;
    private _options;
    private _s2s;
    private _useXMPP;
    private _useS2S;
    private _favoriteEventHandler;
    private _favoriteHandlerToken;
    private favorites;
    private _xmppManagementHandler;
    ready: boolean;
    private readonly _startConfig;
    get startConfig(): {
        start_up: boolean;
        optional: boolean;
    };
    constructor(_eventEmitter: EventEmitter, logger: Logger, _startConfig: any);
    start(_options: any, _core: Core): Promise<void>;
    stop(): Promise<void>;
    init(): Promise<void>;
    private attachHandlers;
    reconnect(): Promise<void>;
    private getServerFavorites;
    private addServerFavorite;
    private removeServerFavorite;
    private toggleFavorite;
    private updateFavorites;
    private getFavorite;
    private createFavoriteObj;
    private onXmppEvent;
    /**
     * @public
     * @since 1.56
     * @method fetchAllFavorites()
     * @instance
     * @description
     *   Fetch all the Favorites from the server in a form of an Array
     * @return {Conversation[]} An array of Favorite objects
     */
    fetchAllFavorites(): Promise<unknown>;
    /**
     * @public
     * @since 1.56
     * @method createFavorite()
     * @instance
     * @description
     *   Add conversation/bubble/bot to Favorites Array
     * @param {String} id of the conversation/bubble
     * @param {String} type of Favorite (can be 'user' or 'bubble')
     * @return {Promise<Favorite>} A Favorite object
     */
    createFavorite(id: any, type: any): Promise<Favorite>;
    /**
     * @public
     * @since 1.56
     * @method deleteFavorite()
     * @instance
     * @description
     *   Delete conversation/bubble/bot from Favorites Array
     * @param {String} id of the Favorite item
     * @return {Favorite[]} A Favorite object
     */
    deleteFavorite(id: any): Promise<any>;
    onFavoriteCreated(fav: {
        id: string;
        peerId: string;
        type: string;
    }): Promise<void>;
    onFavoriteDeleted(fav: {
        id: string;
        peerId: string;
        type: string;
    }): Promise<void>;
}
export { FavoritesService };
