/// <reference types="node" />
export {};
import { EventEmitter } from "events";
import { Logger } from "../common/Logger";
import { Core } from "../Core";
declare class CallLogService {
    private _eventEmitter;
    private logger;
    private started;
    private _initialized;
    private calllogs;
    private callLogHandlerRef;
    private callLogMessageAckRef;
    private callLogNotificationRef;
    private callLogsHistory;
    private telephonyCallLog;
    private telephonyCallLogHistory;
    private deferedObject;
    private callLogComplete;
    private callLogIndex;
    private calllogHandlerToken;
    private _xmpp;
    private _rest;
    private _contacts;
    private _profiles;
    private _calllogEventHandler;
    private _telephony;
    private _options;
    private _s2s;
    private _useXMPP;
    private _useS2S;
    ready: boolean;
    private readonly _startConfig;
    get startConfig(): {
        start_up: boolean;
        optional: boolean;
    };
    constructor(_eventEmitter: EventEmitter, logger: Logger, _startConfig: any);
    start(_options: any, _core: Core): Promise<void>;
    stop(): Promise<void>;
    init(): Promise<void>;
    attachHandlers(): void;
    /*********************************************************/
    /**       MAM REQUESTS                                  **/
    /*********************************************************/
    getCallLogHistoryPage(useAfter?: any): Promise<any>;
    /*********************************************************/
    /**                     API                             **/
    /*********************************************************/
    /**
     * @public
     * @method getAll
     * @instance
     * @description
     *    Get all calls log history for the connected user
     * @return {CallLog[]} An array of call log entry
     */
    getAll(): any[];
    /**
     * @public
     * @method getMissedCallLogCounter
     * @instance
     * @description
     *    Get the number of call missed (state === "missed" && direction === "incoming")
     * @return {Number} The number of call missed
     */
    getMissedCallLogCounter(): number;
    /**
     * @public
     * @method deleteOneCallLog
     * @instance
     * @description
     *    Delete a call log from it's id<br/>
     *    You have to listen to event `rainbow_oncalllogupdated` to know when the action is finished
     * @param {String} id The call log id to remove
     * @return Nothing
     */
    deleteOneCallLog(id: any): Promise<any>;
    /**
     * @public
     * @method deleteCallLogsForContact
     * @instance
     * @description
     *    Delete all calls log items associated to a contact's given jid<br/>
     *    You have to listen to event `rainbow_oncalllogupdated` to know when the action is finished
     * @param {String} jid The call log id to remove
     * @return Nothing
     */
    deleteCallLogsForContact(jid: any): Promise<any>;
    /**
     * @public
     * @method deleteAllCallLogs
     * @instance
     * @description
     *    Delete all call logs history<br/>
     *    You have to listen to event `rainbow_oncalllogupdated` to know when the action is finished
     * @return Nothing
     */
    deleteAllCallLogs(): Promise<any>;
    /**
     * @public
     * @method markCallLogAsRead
     * @instance
     * @description
     *    Mark a call log item as read<br/>
     *    You have to listen to event `rainbow_oncalllogackupdated` to know when the action is finished
     * @param {String} id The call log id
     * @return Nothing
     */
    markCallLogAsRead(id: any): Promise<any>;
    /**
     * @public
     * @method markAllCallsLogsAsRead
     * @instance
     * @description
     *    Mark all call log items as read<br/>
     *    You have to listen to event `rainbow_oncalllogackupdated` to know when the action is finished
     * @return Nothing
     */
    markAllCallsLogsAsRead(): Promise<void>;
    /**
     * @public
     * @method isInitialized
     * @instance
     * @description
     *    Check if the call log history has been received from Rainbow
     *    A false answer means that the call logs have not yet been retrieved from the server.
     * @return {Boolean} True if the call logs have been retrieved. False elsewhere.
     */
    isInitialized(): boolean;
    /*********************************************************/
    /**                  EVENT HANDLERS                     **/
    /*********************************************************/
    onCallLogUpdated(calllogs: any): Promise<void>;
    onCallLogAckReceived(calllogs: any): Promise<void>;
    /*********************************************************/
    /**                  HELPER FUNCTIONS                   **/
    /*********************************************************/
    getOrderByNameCallLogs(): any[];
    getOrderByDateCallLogs(): any[];
    getOrderByNameCallLogsBruts(): any[];
    getOrderByDateCallLogsBruts(): any[];
    getSimplifiedCallLogs(): any[];
    getNumberMissedCalls(): number;
    resetCallLogs(): Promise<void>;
}
export { CallLogService };
