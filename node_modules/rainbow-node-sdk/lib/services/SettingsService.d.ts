/// <reference types="node" />
export {};
import { EventEmitter } from "events";
import { Logger } from "../common/Logger";
import { Core } from "../Core";
declare class Settings {
    private _xmpp;
    private _rest;
    private _options;
    private _s2s;
    private _useXMPP;
    private _useS2S;
    private _eventEmitter;
    private _logger;
    ready: boolean;
    private readonly _startConfig;
    get startConfig(): {
        start_up: boolean;
        optional: boolean;
    };
    constructor(_eventEmitter: EventEmitter, _logger: Logger, _startConfig: any);
    start(_options: any, _core: Core): Promise<unknown>;
    stop(): Promise<unknown>;
    /**
     * @private
     * @method getUserSettings
     * @instance
     * @description
     *  Get current User Settings
     * @return {Promise<UserSettings>} A promise containing the result
     */
    getUserSettings(): Promise<unknown>;
    /**
     * @private
     * @method updateUserSettings
     * @instance
     * @description
     *  Update current User Settings
     * @return {Promise<Settings, ErrorManager>} A promise containing the result
     */
    updateUserSettings(settings: any): Promise<unknown>;
}
export { Settings as SettingsService };
