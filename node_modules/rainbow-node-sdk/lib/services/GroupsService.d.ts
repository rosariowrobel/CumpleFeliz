/// <reference types="node" />
export {};
import { Logger } from "../common/Logger";
import { EventEmitter } from "events";
import { Core } from "../Core";
declare class GroupsService {
    private _xmpp;
    private _rest;
    private _options;
    private _s2s;
    private _useXMPP;
    private _useS2S;
    private _groups;
    private _eventEmitter;
    private _logger;
    ready: boolean;
    private readonly _startConfig;
    get startConfig(): {
        start_up: boolean;
        optional: boolean;
    };
    constructor(_eventEmitter: EventEmitter, _logger: Logger, _startConfig: any);
    start(_options: any, _core: Core): Promise<unknown>;
    stop(): Promise<unknown>;
    /**
    * @public
    * @method createGroup
    * @instance
    * @param {string} name The name of the group to create
    * @param {string} comment The comment of the group to create
    * @param {boolean} isFavorite If true, the group is flagged as favorite
    * @description
    *      Create a new group
    * @async
    * @return {Promise<Object, ErrorManager>}
    * @fulfil {Group} - Created group object or an error object depending on the result
    * @category async
    */
    createGroup(name: any, comment: any, isFavorite: any): Promise<unknown>;
    /**
    * @public
    * @method deleteGroup
    * @instance
    * @param {Object} group The group to delete
    * @description
    * 		Delete an owned group
    * @async
    * @return {Promise<Object, ErrorManager>}
    * @fulfil {Group} - Deleted group object or an error object depending on the result
    * @category async
    */
    deleteGroup(group: any): Promise<unknown>;
    /**
     * @public
     * @method deleteAllGroups
     * @instance
     * @description
     *    Delete all existing owned groups <br/>
     *    Return a promise
     * @return {Object} Nothing or an error object depending on the result
     */
    deleteAllGroups(): Promise<unknown>;
    /**
     * @public
     * @method updateGroupName
     * @instance
     * @param {Object} group The group to update
     * @param {string} name The new name of the group
     * @description
     * 		Update the name of a group
     * @async
     * @return {Promise<Object, ErrorManager>}
     * @fulfil {Group} - Updated group object or an error object depending on the result
     * @category async
     */
    updateGroupName(group: any, name: any): Promise<unknown>;
    /**
     * @private
     * @description
     *      Internal method
     */
    getGroups(): Promise<unknown>;
    /**
    * @public
    * @method setGroupAsFavorite
    * @since 1.67.0
    * @instance
    * @param {Object} group The group
    * @description
    * 		Set a group as a favorite one of the curent loggued in user.
    * @async
    * @return {Promise<Object, ErrorManager>}
    * @fulfil {Group} - Updated group or an error object depending on the result
    * @category async
    */
    setGroupAsFavorite(group: any): Promise<unknown>;
    /**
     * @public
     * @method unsetGroupAsFavorite
     * @since 1.67.0
     * @instance
     * @param {Object} group The group
     * @description
     * 		Remove the favorite state of a group of the curent loggued in user.
     * @async
     * @return {Promise<Object, ErrorManager>}
     * @fulfil {Group} - Updated group or an error object depending on the result
     * @category async
     */
    unsetGroupAsFavorite(group: any): Promise<unknown>;
    /**
     * @public
     * @method addUserInGroup
     * @instance
     * @param {Contact} contact The user to add in group
     * @param {Object} group The group
     * @description
     * 		Add a contact in a group
     * @async
     * @return {Promise<Object, ErrorManager>}
     * @fulfil {Group} - Updated group with the new contact added or an error object depending on the result
     * @category async
     */
    addUserInGroup(contact: any, group: any): Promise<unknown>;
    /**
    * @public
    * @method removeUserFromGroup
    * @instance
    * @param {Contact} contact The user to remove from the group
    * @param {Object} group The destination group
    * @description
    *		Remove a contact from a group
    * @async
    * @return {Promise<Object, ErrorManager>}
    * @fulfil {Group} - Updated group without the removed contact or an error object depending on the result
    * @category async
    */
    removeUserFromGroup(contact: any, group: any): Promise<unknown>;
    /**
     * @public
     * @method getAll
     * @instance
     * @return {Array} The list of existing groups with following fields: id, name, comment, isFavorite, owner, creationDate, array of users in the group
     * @description
     *  Return the list of existing groups
     */
    getAll(): any;
    /**
     * @public
     * @method getFavoriteGroups
     * @instance
     * @return {Array} The list of favorite groups with following fields: id, name, comment, isFavorite, owner, creationDate, array of users in the group
     * @description
     *  Return the list of favorite groups
     */
    getFavoriteGroups(): any;
    /**
     * @public
     * @method getGroupById
     * @instance
     * @param {String} group Id of the group to found
     * @return {Object} The group found if exist or undefined
     * @description
     *  Return a group by its id
     */
    getGroupById(id: any): any;
    /**
     * @public
     * @method getGroupByName
     * @instance
     * @param {String} name Name of the group to found
     * @return {Object} The group found if exist or undefined
     * @description
     *  Return a group by its id
     */
    getGroupByName(name: any): any;
    /**
     * @private
     * @method _onGroupCreated
     * @instance
     * @param {Object} data Contains the groupId of the created group
     * @description
     *		Method called when a group is created
     */
    _onGroupCreated(data: any): Promise<void>;
    /**
     * @private
     * @method _onGroupDeleted
     * @instance
     * @param {Object} data Contains the groupId of the deleted group
     * @description
     *		Method called when a group is deleted
     */
    _onGroupDeleted(data: any): Promise<void>;
    /**
     * @private
     * @method _onGroupUpdated
     * @instance
     * @param {Object} data Contains the groupId of the updated group
     * @description
     *		Method called when a group is updated (name, comment, isFavorite)
     */
    _onGroupUpdated(data: any): Promise<void>;
    /**
     * @private
     * @method _onUserAddedInGroup
     * @instance
     * @param {Object} data Contains the groupId and the userId
     * @description
     *		Method called when a user is added to a group
     */
    _onUserAddedInGroup(data: any): Promise<void>;
    /**
     * @private
     * @method _onUserRemovedFromGroup
     * @instance
     * @param {Object} data Contains the groupId and the userId
     * @description
     *		Method called when a user is removed from a group
     */
    _onUserRemovedFromGroup(data: any): Promise<void>;
}
export { GroupsService as GroupsService };
