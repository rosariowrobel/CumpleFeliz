/// <reference types="node" />
export {};
import { EventEmitter } from "events";
import { Logger } from "../common/Logger";
declare const FeaturesEnum: {
    COMPANY_ADMIN_COUNT: string;
    COMPANY_LOGO_MODIFICATION: string;
    COMPANY_DOMAIN_NAME_MODIFICATION: string;
    COMPANY_DETAILS_MODIFICATION: string;
    WEBRTC_FOR_MOBILE: string;
    BUBBLE_PARTICIPANT_COUNT: string;
    TELEPHONY_BASIC_CALL: string;
    TELEPHONY_SECOND_CALL: string;
    TELEPHONY_TRANSFER_CALL: string;
    TELEPHONY_CONFERENCE_CALL: string;
    TELEPHONY_DEFLECT_CALL: string;
    TELEPHONY_PHONE_BOOK: string;
    TELEPHONY_VOICE_MAIL: string;
    TELEPHONY_CALL_FORWARD: string;
    TELEPHONY_NOMADIC: string;
    CONFERENCE_PARTICIPANT_COUNT: string;
    CONFERENCE_PARTICIPANT_ALLOWED: string;
    WEBRTC_CONFERENCE_ALLOWED: string;
    WEBRTC_CONFERENCE_PARTICIPANT_COUNT: string;
    WEBRTC_PARTICIPANT_ALLOWED: string;
    CONFERENCE_ALLOWED: string;
    CONFERENCE_DIAL_OUT: string;
    CONFERENCE_RECORDING: string;
    MSO365_CALENDAR_PRESENCE: string;
    MSO365_DIRECTORY_SEARCH: string;
    MS_OUTLOOK_PLUGIN: string;
    MS_SKYPE_PLUGIN: string;
    FILE_SHARING_QUOTA_GB: string;
    GOOGLE_CALENDAR_PRESENCE: string;
    WEBRTC_P2P_RECORDING: string;
    BUBBLE_PROMOTE_MEMBER: string;
    BUBBLE_GUESTS_ALLOWED: string;
    TELEPHONY_WEBRTC_GATEWAY: string;
    TELEPHONY_WEBRTC_PSTN_CALLING: string;
    ANALYTICS_DASHBOARD_EC: string;
    ANALYTICS_DASHBOARD_BP: string;
    TELEPHONY_CALL_SUBJECT: string;
    CHANNEL_CREATE: string;
    CHANNEL_CREATE_ADMIN_ROLE_BYPASS: string;
    CHANNEL_ACTIVATED: string;
    PERSONAL_CONFERENCE_ALLOWED: string;
};
declare class ProfilesService {
    private _xmpp;
    private _rest;
    private _options;
    private _s2s;
    private _useXMPP;
    private _useS2S;
    private _eventEmitter;
    private _logger;
    started: any;
    private onUserUpdateNeeded;
    private stats;
    features: any;
    profiles: any;
    mainOffers: any;
    private startDate;
    private timer;
    ready: boolean;
    private readonly _startConfig;
    get startConfig(): {
        start_up: boolean;
        optional: boolean;
    };
    constructor(_eventEmitter: EventEmitter, _logger: Logger, _startConfig: any);
    /*********************************************************************/
    /** LIFECYCLE STUFF                                                 **/
    /*********************************************************************/
    start(_options: any, _core: any, stats: any): void;
    stop(): Promise<void>;
    restart(): void;
    init(): Promise<unknown>;
    /*********************************************************************/
    /** PROFILE API STUFF                                          **/
    /*********************************************************************/
    getServerProfile(): Promise<[unknown, unknown]>;
    getServerProfiles(): Promise<unknown>;
    getServerProfilesFeatures(): Promise<unknown>;
    /*********************************************************************/
    /** USER DATA API STUFF                                             **/
    /*********************************************************************/
    /**
     * APIs for GUI components
     * Used by SDK (public)
     * Warning when modifying this method
     */
    isFeatureEnabled(featureUniqueRef: any): any;
    getFeatureLimitMax(featureUniqueRef: any): any;
    getFeatureLimitMin(featureUniqueRef: any): any;
    /**
     * Returns the profile "Enterprise", "Business", "Essential" or null (if none of them)
     */
    getMyProfileOffer(): any;
    getMyProfileName(): any;
    /**
     * APIs for GUI components
     * Used by SDK (public)
     */
    getMyProfiles(): any[];
    /**
     * Used by SDK (public)
     * Warning when modifying this method
     */
    getMyProfileFeatures(): {};
    getFeaturesEnum(): {
        COMPANY_ADMIN_COUNT: string;
        COMPANY_LOGO_MODIFICATION: string;
        COMPANY_DOMAIN_NAME_MODIFICATION: string;
        COMPANY_DETAILS_MODIFICATION: string;
        WEBRTC_FOR_MOBILE: string;
        BUBBLE_PARTICIPANT_COUNT: string;
        TELEPHONY_BASIC_CALL: string;
        TELEPHONY_SECOND_CALL: string;
        TELEPHONY_TRANSFER_CALL: string;
        TELEPHONY_CONFERENCE_CALL: string;
        TELEPHONY_DEFLECT_CALL: string;
        TELEPHONY_PHONE_BOOK: string;
        TELEPHONY_VOICE_MAIL: string;
        TELEPHONY_CALL_FORWARD: string;
        TELEPHONY_NOMADIC: string;
        CONFERENCE_PARTICIPANT_COUNT: string;
        CONFERENCE_PARTICIPANT_ALLOWED: string;
        WEBRTC_CONFERENCE_ALLOWED: string;
        WEBRTC_CONFERENCE_PARTICIPANT_COUNT: string;
        WEBRTC_PARTICIPANT_ALLOWED: string;
        CONFERENCE_ALLOWED: string;
        CONFERENCE_DIAL_OUT: string;
        CONFERENCE_RECORDING: string;
        MSO365_CALENDAR_PRESENCE: string;
        MSO365_DIRECTORY_SEARCH: string;
        MS_OUTLOOK_PLUGIN: string;
        MS_SKYPE_PLUGIN: string;
        FILE_SHARING_QUOTA_GB: string;
        GOOGLE_CALENDAR_PRESENCE: string;
        WEBRTC_P2P_RECORDING: string;
        BUBBLE_PROMOTE_MEMBER: string;
        BUBBLE_GUESTS_ALLOWED: string;
        TELEPHONY_WEBRTC_GATEWAY: string;
        TELEPHONY_WEBRTC_PSTN_CALLING: string;
        ANALYTICS_DASHBOARD_EC: string;
        ANALYTICS_DASHBOARD_BP: string;
        TELEPHONY_CALL_SUBJECT: string;
        CHANNEL_CREATE: string;
        CHANNEL_CREATE_ADMIN_ROLE_BYPASS: string;
        CHANNEL_ACTIVATED: string;
        PERSONAL_CONFERENCE_ALLOWED: string;
    };
}
export { ProfilesService, FeaturesEnum };
