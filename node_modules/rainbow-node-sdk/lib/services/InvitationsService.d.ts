/// <reference types="node" />
export {};
import { EventEmitter } from "events";
import { Logger } from "../common/Logger";
import { Core } from "../Core";
/**
 * @module
 * @name InvitationsService
 * @version SDKVERSION
 * @public
 * @description
 *      This services manages the invitations received/ sent from/to server.
 *
 */
declare class InvitationsService {
    receivedInvitations: {};
    sentInvitations: {};
    acceptedInvitationsArray: any[];
    sentInvitationsArray: any[];
    receivedInvitationsArray: any[];
    private _listeners;
    private _portalURL;
    private _contactConfigRef;
    acceptedInvitations: {};
    private _logger;
    private _xmpp;
    private _rest;
    private _options;
    private _s2s;
    private _useXMPP;
    private _useS2S;
    private started;
    private _eventEmitter;
    private _invitationEventHandler;
    private _invitationHandlerToken;
    private _contacts;
    private stats;
    private readonly _startConfig;
    ready: boolean;
    get startConfig(): {
        start_up: boolean;
        optional: boolean;
    };
    constructor(_eventEmitter: EventEmitter, _logger: Logger, _startConfig: {
        start_up: boolean;
        optional: boolean;
    });
    /************************************************************/
    /** LIFECYCLE STUFF                                        **/
    /************************************************************/
    start(_options: any, _core: Core, stats: any): Promise<void>;
    init(): Promise<void>;
    stop(): Promise<void>;
    /************************************************************/
    /** EVENT HANDLING STUFF                                   **/
    /************************************************************/
    attachHandlers(): void;
    onRosterChanged(data: any): Promise<unknown>;
    onInvitationsManagementUpdate(userInvite: any): Promise<boolean>;
    handleReceivedInvitation(id: any, action: any): Promise<void>;
    handleSentInvitation(id: any, action: any): Promise<unknown>;
    updateReceivedInvitationsArray(): void;
    updateSentInvitationsArray(): void;
    getServerInvitation(invitationId: any): Promise<unknown>;
    /************************************************************/
    /** PUBLIC METHODS                                         **/
    /************************************************************/
    /**
     * @public
     * @since 1.65
     * @method getReceivedInvitations
     * @instance
     * @description
     *    Get the invite received coming from Rainbow users
     * @return {Invitation[]} The list of invitations received
     */
    getReceivedInvitations(): any[];
    /**
     * @public
     * @since 1.65
     * @method 	getAcceptedInvitations
     * @instance
     * @description
     *    Get the invites you accepted received from others Rainbow users
     * @return {Invitation[]} The list of invite sent
     */
    getAcceptedInvitations(): any[];
    /**
     * @public
     * @since 1.65
     * @method getSentInvitations
     * @instance
     * @description
     *    Get the invites sent to others Rainbow users
     * @return {Invitation[]} The list of invite sent
     */
    getSentInvitations(): any[];
    /**
     * @public
     * @since 1.65
     * @method getInvitationsNumberForCounter
     * @instance
     * @description
     *    Get the number of invitations received from others Rainbow users
     * @return {Invitation[]} The list of invite sent
     */
    getInvitationsNumberForCounter(): number;
    /**
     * @public
     * @since 1.65
     * @method getAllInvitationsNumber
     * @instance
     * @description
     *    Get the number of invitations sent/received to/from others Rainbow users
     * @return {Invitation[]} The list of invite sent
     */
    getAllInvitationsNumber: () => any;
    /**
     * @public
     * @since 1.65
     * @method getInvitation
     * @instance
     * @description
     *    Get an invite by its id
     * @param {String} invitationId the id of the invite to retrieve
     * @return {Invitation} The invite if found
     */
    getInvitation(invitationId: any): any;
    /**
     * @public
     * @since 1.65
     * @method joinContactInvitation
     * @instance
     * @description
     *    Accept a an invitation from an other Rainbow user to mutually join the network <br>
     *    Once accepted, the user will be part of your network. <br>
     *    Return a promise
     * @param {Contact} contact The invitation to accept
     * @return {Object} A promise that contains SDK.OK if success or an object that describes the error
     */
    joinContactInvitation(contact: any): Promise<unknown>;
    /**
     * @public
     * @since 1.65
     * @method sendInvitationByEmail
     * @instance
     * @description
     *    Send an invitation email as UCaaS
     * @param {string} email The email
     * @param {string} [customMessage] The email text (optional)
     * @return {Object} A promise that contains the contact added or an object describing an error
     */
    sendInvitationByEmail(email: any, lang: any, customMessage: any): Promise<unknown>;
    /**
     * @public
     * @since 1.65
     * @method cancelOneSendInvitation
     * @instance
     * @param {Invitation} invitation The invitation to cancel
     * @description
     *    Cancel an invitation sent
     * @return {Object} The SDK Ok object or an error
     */
    cancelOneSendInvitation(invitation: any): Promise<unknown>;
    /**
     * @public
     * @since 1.65
     * @method reSendInvitation
     * @instance
     * @param {Number} invitationId The invitation to re send
     * @description
     *    Re send an invitation sent
     * @return {Object} The SDK Ok object or an error
     */
    reSendInvitation(invitationId: any): Promise<unknown>;
    /**
     * @public
     * @since 1.65
     * @method sendInvitationByEmail
     * @instance
     * @description
     *    Send invitations for a list of emails as UCaaS
     *    LIMITED TO 100 invitations
     * @param {Array} listOfMails The list of emails
     * @return {Object} A promise that the invite result or an object describing an error
     */
    sendInvitationsParBulk(listOfMails: any): Promise<unknown>;
    /**
     * @public
     * @since 1.65
     * @method acceptInvitation
     * @instance
     * @description
     *    Accept a an invitation from an other Rainbow user to mutually join the network <br>
     *    Once accepted, the user will be part of your network. <br>
     *    Return a promise
     * @param {Invitation} invitation The invitation to accept
     * @return {Object} A promise that contains SDK.OK if success or an object that describes the error
     */
    acceptInvitation(invitation: any): Promise<unknown>;
    /**
     * @public
     * @since 1.65
     * @method declineInvitation
     * @instance
     * @description
     *    Decline an invitation from an other Rainbow user to mutually join the network <br>
     *    Once declined, the user will not be part of your network. <br>
     *    Return a promise
     * @param {Invitation} invitation The invitation to decline
     * @return {Object} A promise that contains SDK.OK in case of success or an object that describes the error
     */
    declineInvitation(invitation: any): Promise<unknown>;
    /************************************************************/
    /** PRIVATE METHODS                                        **/
    /************************************************************/
    /**
     * @private
     */
    updateContactInvitationStatus(contactDBId: any, status: any, invitation: any): Promise<unknown>;
    /**
     * @private
     */
    sortInvitationArray(invitA: any, invitB: any): number;
    /**
     * @private
     */
    getAllReceivedInvitations(): Promise<unknown>;
    /**
     * @private
     */
    getAllSentInvitations(): Promise<unknown>;
}
export { InvitationsService };
