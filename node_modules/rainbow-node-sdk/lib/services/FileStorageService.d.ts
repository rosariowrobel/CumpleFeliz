export {};
import { Core } from "../Core";
declare class FileStorage {
    private _rest;
    private _xmpp;
    private _options;
    private _s2s;
    private _useXMPP;
    private _useS2S;
    private _eventEmitter;
    private _logger;
    private _fileServerService;
    private _conversations;
    fileDescriptors: any;
    fileDescriptorsByDate: any;
    fileDescriptorsByName: any;
    fileDescriptorsBySize: any;
    receivedFileDescriptors: any;
    receivedFileDescriptorsByName: any;
    receivedFileDescriptorsByDate: any;
    receivedFileDescriptorsBySize: any;
    consumptionData: any;
    private _contactService;
    private startDate;
    started: any;
    private _errorHelperService;
    private _helpersService;
    ready: boolean;
    private readonly _startConfig;
    get startConfig(): {
        start_up: boolean;
        optional: boolean;
    };
    constructor(_eventEmitter: any, _logger: any, _startConfig: any);
    start(_options: any, _core: Core): Promise<unknown>;
    stop(): Promise<unknown>;
    init(): Promise<unknown>;
    /**
     * @private
     * @since 1.47.1
     * @method
     * @instance
     * @description
     *    Allow to add a file to an existing Peer 2 Peer or Bubble conversation
     *    Return a promise
     * @return {Message} Return the message sent
     */
    _addFileToConversation(conversation: any, file: any, data: any): Promise<unknown>;
    /**************** API ***************/
    /**
     * @public
     * @since 1.47.1
     * @method uploadFileToConversation
     * @instance
     * @param {Conversation} conversation   The conversation where the message will be added
     * @param {{size, type, name, preview, path}} object reprensenting The file to add. Properties are : the Size of the file in octets, the mimetype, the name, a thumbnail preview if it is an image, the path to the file to share.
     * @param {String} strMessage   An optional message to add with the file
     * @description
     *    Allow to add a file to an existing conversation (ie: conversation with a contact)
     *    Return the promise
     * @return {Message} Return the message sent
     */
    uploadFileToConversation(conversation: any, file: any, strMessage: any): Promise<unknown>;
    /**
     * @public
     * @since 1.47.1
     * @method uploadFileToBubble
     * @instance
     * @param {Bubble} bubble   The bubble where the message will be added
     * @param {File} file The file to add
     * @param {String} strMessage   An optional message to add with the file
     * @description
     *    Allow to add a file to an existing Bubble conversation
     *    Return a promise
     * @return {Message} Return the message sent
     */
    uploadFileToBubble(bubble: any, file: any, strMessage: any): Promise<unknown>;
    /**
     * @public
     * @since 1.67.0
     * @method uploadFileToStorage
     * @param {String|File} file An {size, type, name, preview, path}} object reprensenting The file to add. Properties are : the Size of the file in octets, the mimetype, the name, a thumbnail preview if it is an image, the path to the file to share.
     * @instance
     * @description
     *   Send a file in user storage
     */
    uploadFileToStorage(file: any): Promise<unknown>;
    /**
     * @public
     * @since 1.47.1
     * @method downloadFile
     * @instance
     * @param {FileDescriptor} fileDescriptor   The description of the file to download (short file descriptor)
     * @description
     *    Allow to download a file from the server)
     *    Return a promise
     * @return {} Object with : buffer Binary data of the file type,  Mime type, fileSize: fileSize, Size of the file , fileName: fileName The name of the file  Return the file received
     */
    downloadFile(fileDescriptor: any): Promise<unknown>;
    /**
     * @public
     * @since 1.47.1
     * @method getUserQuotaConsumption
     * @instance
     * @description
     *    Get the current file storage quota and consumption for the connected user
     *    Return a promise
     * @return {Object} Return an object containing the user quota and consumption
     */
    /**
     * @public
     * @since 1.47.1
     * @method removeFile
     * @instance
     * @param {FileDescriptor} fileDescriptor   The description of the file to remove (short file descriptor)
     * @description
     *    Remove an uploaded file
     *    Return a promise
     * @return {Object} Return a SDK OK Object or a SDK error object depending the result
     */
    removeFile(fileDescriptor: any): Promise<unknown>;
    /**********************************************************/
    /**  Basic accessors to FileStorage's properties   **/
    /**********************************************************/
    getFileDescriptorById(id: any): any;
    /**
     * @public
     * @since 1.47.1
     * @method getFileDescriptorFromId
     * @instance
     * @param {String} id   The file id
     * @description
     *    Get the file descriptor the user own by it's id
     * @return {FileDescriptor} Return a file descriptors found or null if no file descriptor has been found
     */
    getFileDescriptorFromId(id: any): any;
    /**
     * @public
     * @since 1.47.1
     * @method getFilesReceivedInConversation
     * @instance
     * @param {Conversation} conversation   The conversation where to get the files
     * @description
     *    Get the list of all files received in a conversation with a contact
     *    Return a promise
     * @return {FileDescriptor[]} Return an array of file descriptors found or an empty array if no file descriptor has been found
     */
    getFilesReceivedInConversation(conversation: any): Promise<unknown>;
    /**
     * @public
     * @since 1.47.1
     * @method getFilesReceivedInBubble
     * @instance
     * @param {Bubble} bubble   The bubble where to get the files
     * @description
     *    Get the list of all files received in a bubble
     *    Return a promise
     * @return {FileDescriptor[]} Return an array of file descriptors found or an empty array if no file descriptor has been found
     */
    getFilesReceivedInBubble(bubble: any): Promise<unknown>;
    /**
     * @private
     * @description
     * Method returns a file descriptor with full contact object in viewers'list by requesting server
     *
     * @param {string} fileId [required] Identifier of file descriptor
     * @return {Promise<FileDescriptor>} file descriptor
     *
     */
    getCompleteFileDescriptorById(id: any): Promise<unknown>;
    /**
     *
     * @private
     *
     * @return {FileDescriptor[]}
     */
    getDocuments(): any;
    /**
     *
     * @private
     *
     * @return {FileDescriptor}
     */
    getReceivedDocuments(): any;
    /**
     *
     * @private
     *
     * @param {boolean} received
     * @return {FileDescriptor[]}
     */
    getDocumentsByName(received: any): any;
    /**
     *
     * @private
     *
     * @param {boolean} received
     * @return {FileDescriptor[]}
     */
    getDocumentsByDate(received: any): any;
    /**
     *
     * @private
     *
     * @param {boolean} received
     * @return {FileDescriptor[]}
     */
    getDocumentsBySize(received: any): any;
    /**
     *
     * @private
     *
     * @param {string} dbId
     * @return {FileDescriptor[]}
     */
    getReceivedFilesFromContact(dbId: any): any;
    /**
     *
     * @private
     *
     * @param {string} dbId
     * @return {FileDescriptor[]}
     */
    getSentFilesToContact(dbId: any): any;
    /**
     *
     * @public
     *
     * @param {string} bubbleId id of the bubble
     * @return {FileDescriptor[]}
     */
    getReceivedFilesForRoom(bubbleId: any): any;
    /**
     *
     * @private
     *
     * @return {Object}
     */
    getConsumptionData(): any;
    /**********************************************************/
    /**  Methods requesting server                           **/
    /**********************************************************/
    /**
     * @private
     * @description
     * Method requests server to create a file descriptor this will be saved to local file descriptor list (i.e. this.fileDescriptors)
     *
     * @param {string} name [required] name of file for which file descriptor has to be created
     * @param {string} extension [required] extension of file
     * @param {number} size [required] size of  file
     * @param {FileViewer[]} viewers [required] list of viewers having access to the file (a viewer could be either be a user or a room)
     * @return {Promise<FileDescriptor>} file descriptor created by server or error
     *
     */
    createFileDescriptor(name: any, extension: any, size: any, viewers: any): Promise<unknown>;
    /**
     *
     * @private
     *
     * @param {*} data
     * @return {FileDescriptor}
     */
    createFileDescriptorFromData(data: any): any;
    /**
     * @private
     * @description
     *
     * Method request deletion of a file descriptor on the server and removes it from local storage
     * @param {string} id [required] file descriptor id to be destroyed
     * @return {Promise<FileDescriptor[]>} list of remaining file descriptors
     */
    deleteFileDescriptor(id: any): Promise<unknown>;
    /**
     * @private
     *
     * @description
     * Method request deletion of all files on the server and removes them from local storage
     * @return {Promise<{}>} ???
     */
    deleteAllFileDescriptor(): Promise<unknown>;
    /**
     * @public
     *
     * @description
     * Method retrieve full list of files belonging to user making the request
     *
     * @return {Promise<FileDescriptor[]>}
     *
     */
    retrieveFileDescriptorsListPerOwner(): Promise<unknown>;
    /**
     * @private
     *
     * @description
     * Method retrieve a list of [limit] files belonging to user making the request begining with offset
     *
     * @return {Promise<FileDescriptor[]>}
     *
     */
    retrieveFileDescriptorsListPerOwnerwithOffset(offset: any, limit: any): Promise<unknown>;
    /**
     * @private
     *
     * @description
     * Method request for the list of files received by a user from a given peer (i.e. inside a given conversation)
     *
     * @param {string} userId [required] dbId of user making the request
     * @param {string} peerId [required] dbId of peer user in the conversation
     * @return {Promise<FileDescriptor[]>} : list of received files descriptors
     *
     */
    retrieveFilesReceivedFromPeer(userId: any, peerId: any): Promise<unknown>;
    /**
     * @public
     *
     * @description
     * Method request for the list of files sent to a given peer (i.e. inside a given conversation)
     *
     * @param {string} peerId [required] id of peer user in the conversation
     * @return {Promise<FileDescriptor[]>} : list of sent files descriptors
     *
     */
    retrieveSentFiles(peerId: any): Promise<unknown>;
    /**
     * @public
     *
     * @description
     * Method request for the list of files received in a room
     *
     * @param {string} bubbleId [required] Id of the room
     * @return {Promise<FileDescriptor[]>} : list of received files descriptors
     *
     */
    retrieveReceivedFilesForRoom(bubbleId: any): Promise<unknown>;
    /**
     *
     * @public
     *
     * @description
     * Method request for the list of files received by a user
     *
     * @param {string} viewerId [required] Id of the viewer, could be either an userId or a bubbleId
     * @return {Promise<FileDescriptor[]>} : list of received files descriptors
     *
     */
    retrieveReceivedFiles(viewerId: any): Promise<unknown>;
    /**
     * @public
     * @since 1.47.1
     * @method getFilesSentInConversation
     * @instance
     * @param {Conversation} conversation   The conversation where to get the files
     * @description
     *    Get the list of all files sent in a conversation with a contact
     *    Return a promise
     * @return {FileDescriptor[]} Return an array of file descriptors found or an empty array if no file descriptor has been found
     */
    getFilesSentInConversation(conversation: any): Promise<unknown>;
    /**
     * @public
     * @since 1.47.1
     * @method getFilesSentInBubble
     * @instance
     * @param {Bubble} bubble   The bubble where to get the files
     * @description
     *    Get the list of all files sent in a bubble
     *    Return a promise
     * @return {FileDescriptor[]} Return an array of file descriptors found or an empty array if no file descriptor has been found
     */
    getFilesSentInBubble(bubble: any): Promise<unknown>;
    /**
     * @public
     * @since 1.47.1
     * @method
     * @instance
     * @description
     *    Get the current file storage quota and consumption for the connected user
     *    Return a promise
     * @return {Object} Return an object containing the user quota and consumption
     */
    getUserQuotaConsumption(): Promise<unknown>;
    /**
     * @public
     * @since 1.47.1
     * @method getAllFilesSent
     * @instance
     * @description
     *    Get the list of files (represented using an array of File Descriptor objects) created and owned by the connected which is the list of file sent to all of his conversations and bubbles.
     * @return {FileDescriptor[]} Return an array containing the list of FileDescriptor objects representing the files sent
     */
    getAllFilesSent(): any;
    /**
     * @public
     * @since 1.47.1
     * @method getAllFilesReceived
     * @instance
     * @description
     *    Get the list of files (represented using an array of File Descriptor objects) received by the connected user from all of his conversations and bubbles.
     * @return {FileDescriptor[]} Return an array containing a list of FileDescriptor objects representing the files received
     */
    getAllFilesReceived(): any;
    /**
     * @private
     *
     * @description
     * Method retrieve the data usage of a given user
     *
     * @return {Promise<{}>} : object data with the following properties:
     *                  - feature {string} : The feature key belonging to the user's profile
     *                  - maxValue {number} : The quota associated to this offer [octet]
     *                  - currentValue {number} : The user's current consumption [octet]
     *                  - unit {string} : The unit of this counters
     */
    retrieveUserConsumption(): Promise<unknown>;
    /**
     * @private
     *
     * @description
     * Method deletes a viewer from the list of viewer of a given file
     *
     * @param {string} viewerId [required] Identifier of viewer to be removed. Could be either a user or a room
     * @param {string} fileId [required] Identifier of the fileDescriptor from which the viewer will be removed
     * @return {Promise<{}>}
     *
     */
    deleteFileViewer(viewerId: any, fileId: any): Promise<unknown>;
    /**
     *
     * @private
     *
     * @description
     * Method adds a viewer to a given file on server if it is not already one
     *
     * @param {string} fileId [required] Identifier of file
     * @param {string} viewerId [required] Identifier of viewer to be added
     * @param {string} viewerType [required] type of viewer to be added (user or room)
     * @return {Promise<FileDescriptor>} file descriptor with newly added viewer
     *
     */
    addFileViewer(fileId: any, viewerId: any, viewerType: any): Promise<unknown>;
    /**
     * @private
     *
     * @description
     * Method retrieve a specific file descriptor from server
     *
     * @param {string} fileId [required] Identifier of file descriptor to retrieve
     * @return {Promise<FileDescriptor>} file descriptor retrieved
     *
     */
    retrieveOneFileDescriptor(fileId: any): Promise<unknown>;
    /**
     * @private
     *
     * @description
     * Method retrieve a specific file descriptor from server and stores it in local fileDescriptors (replace existing and add if new)
     *
     * @param {string} fileId [required] Identifier of file descriptor to retrieve
     * @return {Promise<FileDescriptor>} file descriptor retrieved or null if none found
     *
     */
    retrieveAndStoreOneFileDescriptor(fileId: any, forceRetrieve: any): Promise<any>;
    /**********************************************************/
    /**  Utilities                                           **/
    /**********************************************************/
    deleteFileDescriptorFromCache(id: any, forceDelete: any): void;
    orderDocuments(): void;
    orderReceivedDocuments(): void;
    orderDocumentsForRoom(documents: any): any[];
    replaceOrderedByFilter(resultArray: any, originalArray: any, filterFct: any, flag: any, sortFct: any): void;
    getName(file: any): {
        name: string;
        date: string;
    };
    getDate(file: any): any;
    getSize(file: any): {
        name: string;
        size: string;
    };
    sortByName(fileA: any, fileB: any): number;
    sortBySize(fileA: any, fileB: any): number;
    sortByDate(fileA: any, fileB: any): number;
    /**
     * @private
     *
     * @description
     * Method extract fileId part of URL
     *
     * @param {string} url
     * @return {string}
     *
     */
    extractFileIdFromUrl(url: any): any;
}
export { FileStorage as FileStorageService };
