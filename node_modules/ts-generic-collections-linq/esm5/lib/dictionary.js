/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { List } from './list';
import { Group, objCompare, ITEM_NOT_FOUND_MSG, MULTIPLE_INSTANCES_FOUND_MSG } from './common';
/**
 * @record
 * @template TKey, TValue
 */
export function IDictionary() { }
if (false) {
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    IDictionary.prototype.add = function (key, value) { };
    /**
     * @param {?} items
     * @return {?}
     */
    IDictionary.prototype.addRange = function (items) { };
    /**
     * @param {?} predicate
     * @return {?}
     */
    IDictionary.prototype.remove = function (predicate) { };
    /**
     * @return {?}
     */
    IDictionary.prototype.clear = function () { };
    /**
     * @param {?} key
     * @return {?}
     */
    IDictionary.prototype.containsKey = function (key) { };
    /**
     * @param {?} value
     * @return {?}
     */
    IDictionary.prototype.containsValue = function (value) { };
    /**
     * @param {?} key
     * @return {?}
     */
    IDictionary.prototype.tryGetValue = function (key) { };
}
/**
 * @template TKey, TValue
 */
var /**
 * @template TKey, TValue
 */
Dictionary = /** @class */ (function () {
    function Dictionary(list) {
        if (list === void 0) { list = null; }
        this.list = new Array();
        if (list) {
            this.list = list;
        }
    }
    /* IList */
    /* IList */
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    Dictionary.prototype.add = /* IList */
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        /** @type {?} */
        var pair = new KeyValuePair(key, value);
        if (this.containsKey(key)) {
            throw "Duplicate key. Cannot add.";
        }
        this.list.push(pair);
    };
    /**
     * @param {?} items
     * @return {?}
     */
    Dictionary.prototype.addRange = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        items.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return _this.add(x.key, x.value); }));
    };
    /**
     * @return {?}
     */
    Dictionary.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.list = new Array();
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    Dictionary.prototype.remove = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var temp = new Array();
        this.list.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (!predicate(element)) {
                temp.push(element);
            }
        }));
        this.list = temp;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Dictionary.prototype.containsKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.any((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return objCompare(x.key, key); }));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Dictionary.prototype.containsValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.any((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return objCompare(x.value, value); }));
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Dictionary.prototype.tryGetValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var item = this.singleOrDefault((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return objCompare(x.key, key); }));
        if (item) {
            return item.value;
        }
        return null;
    };
    /* IEnumerable */
    /* IEnumerable */
    /**
     * @return {?}
     */
    Dictionary.prototype.asEnumerable = /* IEnumerable */
    /**
     * @return {?}
     */
    function () {
        return this;
    };
    Object.defineProperty(Dictionary.prototype, "length", {
        get: /**
         * @return {?}
         */
        function () {
            return this.list.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} index
     * @return {?}
     */
    Dictionary.prototype.elementAt = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        try {
            return this.list[index];
        }
        catch (e) {
            return null;
        }
    };
    /**
     * @param {?=} predicate
     * @return {?}
     */
    Dictionary.prototype.any = /**
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (!predicate) {
            return this.list.length > 0;
        }
        for (var i = 0; i < this.list.length; i++) {
            if (predicate(this.list[i])) {
                return true;
            }
        }
        return false;
    };
    /**
     * @param {?=} predicate
     * @return {?}
     */
    Dictionary.prototype.all = /**
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (!predicate) {
            return this.list.length > 0;
        }
        for (var i = 0; i < this.list.length; i++) {
            if (!predicate(this.list[i])) {
                return false;
            }
        }
        return true;
    };
    /**
     * @param {?=} predicate
     * @return {?}
     */
    Dictionary.prototype.single = /**
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (predicate === void 0) { predicate = null; }
        if (this.list.length <= 0) {
            throw ITEM_NOT_FOUND_MSG;
        }
        if (predicate) {
            /** @type {?} */
            var item = this.singleOrDefault(predicate);
            if (!item) {
                throw ITEM_NOT_FOUND_MSG;
            }
            return item;
        }
        return this.list[0];
    };
    /**
     * @param {?=} predicate
     * @return {?}
     */
    Dictionary.prototype.first = /**
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (predicate === void 0) { predicate = null; }
        if (this.list.length <= 0) {
            throw ITEM_NOT_FOUND_MSG;
        }
        if (predicate) {
            /** @type {?} */
            var item = this.firstOrDefault(predicate);
            if (!item) {
                throw ITEM_NOT_FOUND_MSG;
            }
            return item;
        }
        return this.list[0];
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    Dictionary.prototype.last = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        if (this.list.length <= 0) {
            throw ITEM_NOT_FOUND_MSG;
        }
        if (predicate) {
            /** @type {?} */
            var item = this.lastOrDefault(predicate);
            if (!item) {
                throw ITEM_NOT_FOUND_MSG;
            }
            return item;
        }
        return this.list[this.list.length - 1];
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    Dictionary.prototype.singleOrDefault = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var temp = new Array();
        this.list.filter((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (predicate(element)) {
                temp.push(element);
            }
        }));
        if (temp.length > 1) {
            throw MULTIPLE_INSTANCES_FOUND_MSG;
        }
        if (temp.length <= 0) {
            return null;
        }
        return temp[0];
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    Dictionary.prototype.firstOrDefault = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        for (var i = 0; i < this.length; i++) {
            /** @type {?} */
            var item = this.list[i];
            if (predicate(item)) {
                return item;
            }
        }
        return null;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    Dictionary.prototype.lastOrDefault = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        for (var i = this.length; i >= 0; i--) {
            /** @type {?} */
            var item = this.list[i - 1];
            if (predicate(item)) {
                return item;
            }
        }
        return null;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    Dictionary.prototype.where = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var temp = new Dictionary();
        this.list.filter((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (predicate(element)) {
                temp.add(element.key, element.value);
            }
        }));
        return temp;
    };
    /**
     * @template TResult
     * @param {?} predicate
     * @return {?}
     */
    Dictionary.prototype.select = /**
     * @template TResult
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var temp = new List();
        this.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return temp.add(predicate(x)); }));
        return temp;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    Dictionary.prototype.forEach = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return predicate(x); }));
    };
    /**
     * @return {?}
     */
    Dictionary.prototype.toArray = /**
     * @return {?}
     */
    function () {
        return this.list;
    };
    /**
     * @template TOuter, TMatch, TResult
     * @param {?} outer
     * @param {?} conditionInner
     * @param {?} conditionOuter
     * @param {?} select
     * @param {?=} leftJoin
     * @return {?}
     */
    Dictionary.prototype.join = /**
     * @template TOuter, TMatch, TResult
     * @param {?} outer
     * @param {?} conditionInner
     * @param {?} conditionOuter
     * @param {?} select
     * @param {?=} leftJoin
     * @return {?}
     */
    function (outer, conditionInner, conditionOuter, select, leftJoin) {
        if (leftJoin === void 0) { leftJoin = false; }
        /** @type {?} */
        var resultList = new List();
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            /** @type {?} */
            var outerEntries = outer.toArray().filter((/**
             * @param {?} y
             * @return {?}
             */
            function (y) { return conditionInner(x) === conditionOuter(y); }));
            if (leftJoin && outerEntries && outerEntries.length <= 0) {
                resultList.add(select(x, null));
            }
            else {
                outerEntries.forEach((/**
                 * @param {?} z
                 * @return {?}
                 */
                function (z) { return resultList.add(select(x, z)); }));
            }
        }));
        return resultList;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    Dictionary.prototype.groupBy = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var groups = {};
        this.list.forEach((/**
         * @param {?} o
         * @return {?}
         */
        function (o) {
            /** @type {?} */
            var group = JSON.stringify(predicate(o));
            groups[group] = groups[group] || [];
            groups[group].push(o);
        }));
        /** @type {?} */
        var g = Object.keys(groups).map((/**
         * @param {?} group
         * @return {?}
         */
        function (group) {
            /** @type {?} */
            var a = group.substr(1, group.length - 2);
            /** @type {?} */
            var grp = new Group(a.split(','), groups[group]);
            return grp;
        }));
        return new List(g);
    };
    /**
     * @param {?} comparer
     * @return {?}
     */
    Dictionary.prototype.orderBy = /**
     * @param {?} comparer
     * @return {?}
     */
    function (comparer) {
        /** @type {?} */
        var temp = this.list.sort((/**
         * @param {?} x
         * @param {?} y
         * @return {?}
         */
        function (x, y) { return comparer.compare(x, y); }));
        return new List(temp);
    };
    /**
     * @param {?} comparer
     * @return {?}
     */
    Dictionary.prototype.distinct = /**
     * @param {?} comparer
     * @return {?}
     */
    function (comparer) {
        /** @type {?} */
        var uniques = new List();
        this.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            uniques.forEach((/**
             * @param {?} y
             * @return {?}
             */
            function (y) {
                if (!comparer.equals(x, y)) {
                    uniques.add(x);
                }
            }));
        }));
        return uniques;
    };
    /**
     * @param {?} list
     * @return {?}
     */
    Dictionary.prototype.union = /**
     * @param {?} list
     * @return {?}
     */
    function (list) {
        this.addRange(list.toArray());
        return this;
    };
    /**
     * @param {?} no
     * @return {?}
     */
    Dictionary.prototype.skip = /**
     * @param {?} no
     * @return {?}
     */
    function (no) {
        if (no > 0) {
            return new Dictionary(this.list.slice(no, this.list.length - 1));
        }
        return this;
    };
    /**
     * @param {?} no
     * @return {?}
     */
    Dictionary.prototype.take = /**
     * @param {?} no
     * @return {?}
     */
    function (no) {
        if (no > 0) {
            return new Dictionary(this.list.slice(0, no));
        }
        return this;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    Dictionary.prototype.sum = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var sum = 0;
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return sum = sum + predicate(x); }));
        return sum;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    Dictionary.prototype.avg = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        return this.sum(predicate) / this.length;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    Dictionary.prototype.min = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var min = 0;
        /** @type {?} */
        var i = 0;
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            if (i == 0) {
                min = predicate(x);
            }
            else {
                /** @type {?} */
                var val = predicate(x);
                if (val < min) {
                    min = val;
                }
            }
            i++;
        }));
        return min;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    Dictionary.prototype.max = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var max = 0;
        /** @type {?} */
        var i = 0;
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            if (i == 0) {
                max = predicate(x);
            }
            else {
                /** @type {?} */
                var val = predicate(x);
                if (val > max) {
                    max = val;
                }
            }
            i++;
        }));
        return max;
    };
    /**
     * @param {?=} predicate
     * @return {?}
     */
    Dictionary.prototype.count = /**
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (predicate === void 0) { predicate = null; }
        if (!predicate) {
            return this.length;
        }
        /** @type {?} */
        var count = 0;
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            if (predicate(x)) {
                count++;
            }
        }));
        return count;
    };
    return Dictionary;
}());
/**
 * @template TKey, TValue
 */
export { Dictionary };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Dictionary.prototype.list;
}
/**
 * @template TKey, TValue
 */
var /**
 * @template TKey, TValue
 */
KeyValuePair = /** @class */ (function () {
    function KeyValuePair(key, value) {
        this.key = key;
        this.value = value;
    }
    return KeyValuePair;
}());
/**
 * @template TKey, TValue
 */
export { KeyValuePair };
if (false) {
    /** @type {?} */
    KeyValuePair.prototype.key;
    /** @type {?} */
    KeyValuePair.prototype.value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGljdGlvbmFyeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RzLWdlbmVyaWMtY29sbGVjdGlvbnMtbGlucS8iLCJzb3VyY2VzIjpbImxpYi9kaWN0aW9uYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQzlCLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLDRCQUE0QixFQUFFLE1BQU0sVUFBVSxDQUFDOzs7OztBQUUvRixpQ0FTQzs7Ozs7OztJQVJHLHNEQUFxQzs7Ozs7SUFDckMsc0RBQXFEOzs7OztJQUNyRCx3REFBdUU7Ozs7SUFDdkUsOENBQWU7Ozs7O0lBRWYsdURBQWlDOzs7OztJQUNqQywyREFBdUM7Ozs7O0lBQ3ZDLHVEQUFnQzs7Ozs7QUFHcEM7Ozs7SUFJSSxvQkFBWSxJQUE4QztRQUE5QyxxQkFBQSxFQUFBLFdBQThDO1FBRmxELFNBQUksR0FBc0MsSUFBSSxLQUFLLEVBQThCLENBQUM7UUFHdEYsSUFBSSxJQUFJLEVBQUU7WUFDTixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUNwQjtJQUNMLENBQUM7SUFFRCxXQUFXOzs7Ozs7O0lBRVgsd0JBQUc7Ozs7OztJQUFILFVBQUksR0FBUyxFQUFFLEtBQWE7O1lBQ3BCLElBQUksR0FBRyxJQUFJLFlBQVksQ0FBZSxHQUFHLEVBQUUsS0FBSyxDQUFDO1FBRXJELElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN2QixNQUFNLDRCQUE0QixDQUFBO1NBQ3JDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQzs7Ozs7SUFFRCw2QkFBUTs7OztJQUFSLFVBQVMsS0FBbUM7UUFBNUMsaUJBRUM7UUFERyxLQUFLLENBQUMsT0FBTzs7OztRQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSSxD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Szs7OztJQUFMLFVBQU0sU0FBOEQ7UUFBOUQsMEJBQUEsRUFBQSxnQkFBOEQ7UUFDaEUsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUN0Qjs7WUFFRyxLQUFLLEdBQVcsQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLENBQUM7WUFDZixJQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDYixLQUFLLEVBQUUsQ0FBQzthQUNYO1FBQ0wsQ0FBQyxFQUFDLENBQUM7UUFFSCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBQ0wsaUJBQUM7QUFBRCxDQUFDLEFBMVhELElBMFhDOzs7Ozs7Ozs7O0lBeFhHLDBCQUEwRjs7Ozs7QUEwWDlGOzs7O0lBSUksc0JBQVksR0FBUyxFQUFFLEtBQWE7UUFDaEMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBQ0wsbUJBQUM7QUFBRCxDQUFDLEFBUkQsSUFRQzs7Ozs7OztJQVBHLDJCQUFVOztJQUNWLDZCQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUVudW1lcmFibGUsIElDb21wYXJlciwgSUVxdWFsaXR5Q29tcGFyZXIgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAnLi9saXN0JztcclxuaW1wb3J0IHsgR3JvdXAsIG9iakNvbXBhcmUsIElURU1fTk9UX0ZPVU5EX01TRywgTVVMVElQTEVfSU5TVEFOQ0VTX0ZPVU5EX01TRyB9IGZyb20gJy4vY29tbW9uJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSURpY3Rpb25hcnk8VEtleSwgVFZhbHVlPiBleHRlbmRzIElFbnVtZXJhYmxlPEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+PiB7XHJcbiAgICBhZGQoa2V5OiBUS2V5LCB2YWx1ZTogVFZhbHVlKSA6IHZvaWQ7XHJcbiAgICBhZGRSYW5nZShpdGVtczogS2V5VmFsdWVQYWlyPFRLZXksIFRWYWx1ZT5bXSkgOiB2b2lkO1xyXG4gICAgcmVtb3ZlKHByZWRpY2F0ZTogKGl0ZW06S2V5VmFsdWVQYWlyPFRLZXksIFRWYWx1ZT4pID0+IGJvb2xlYW4pIDogdm9pZDtcclxuICAgIGNsZWFyKCkgOiB2b2lkO1xyXG5cclxuICAgIGNvbnRhaW5zS2V5KGtleTogVEtleSkgOiBib29sZWFuO1xyXG4gICAgY29udGFpbnNWYWx1ZSh2YWx1ZTogVFZhbHVlKSA6IGJvb2xlYW47XHJcbiAgICB0cnlHZXRWYWx1ZShrZXk6IFRLZXkpIDogVFZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRGljdGlvbmFyeTxUS2V5LCBUVmFsdWU+IGltcGxlbWVudHMgSURpY3Rpb25hcnk8VEtleSwgVFZhbHVlPlxyXG57XHJcbiAgICBwcml2YXRlIGxpc3Q6IEFycmF5PEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+PiA9IG5ldyBBcnJheTxLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPj4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihsaXN0OiBBcnJheTxLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPj4gPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKGxpc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5saXN0ID0gbGlzdDtcclxuICAgICAgICB9ICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICAvKiBJTGlzdCAqL1xyXG5cclxuICAgIGFkZChrZXk6IFRLZXksIHZhbHVlOiBUVmFsdWUpIDogdm9pZCB7XHJcbiAgICAgICAgbGV0IHBhaXIgPSBuZXcgS2V5VmFsdWVQYWlyPFRLZXksIFRWYWx1ZT4oa2V5LCB2YWx1ZSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbnRhaW5zS2V5KGtleSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJEdXBsaWNhdGUga2V5LiBDYW5ub3QgYWRkLlwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpc3QucHVzaChwYWlyKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRSYW5nZShpdGVtczogS2V5VmFsdWVQYWlyPFRLZXksIFRWYWx1ZT5bXSkgOiB2b2lkIHtcclxuICAgICAgICBpdGVtcy5mb3JFYWNoKHggPT4gdGhpcy5hZGQoeC5rZXksIHgudmFsdWUpKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhcigpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5saXN0ID0gbmV3IEFycmF5PEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+PigpO1xyXG4gICAgfSAgICBcclxuXHJcbiAgICByZW1vdmUocHJlZGljYXRlOiAoaXRlbTpLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPikgPT4gYm9vbGVhbikgOiB2b2lkIHtcclxuICAgICAgICBsZXQgdGVtcCA9IG5ldyBBcnJheTxLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPj4oKTtcclxuXHJcbiAgICAgICAgdGhpcy5saXN0LmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgIGlmICghcHJlZGljYXRlKGVsZW1lbnQpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5saXN0ID0gdGVtcDtcclxuICAgIH0gICAgXHJcblxyXG4gICAgY29udGFpbnNLZXkoa2V5OiBUS2V5KSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFueSh4ID0+IG9iakNvbXBhcmUoeC5rZXksIGtleSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnRhaW5zVmFsdWUodmFsdWU6IFRWYWx1ZSkgOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hbnkoeCA9PiBvYmpDb21wYXJlKHgudmFsdWUsIHZhbHVlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5R2V0VmFsdWUoa2V5OiBUS2V5KSA6IFRWYWx1ZSB7XHJcbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLnNpbmdsZU9yRGVmYXVsdCh4ID0+IG9iakNvbXBhcmUoeC5rZXksIGtleSkpO1xyXG5cclxuICAgICAgICBpZiAoaXRlbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbS52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIElFbnVtZXJhYmxlICovXHJcblxyXG4gICAgYXNFbnVtZXJhYmxlKCkgOiBJRW51bWVyYWJsZTxLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPj4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5saXN0Lmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBlbGVtZW50QXQoaW5kZXg6IG51bWJlcikgOiBLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdFtpbmRleF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH0gICAgXHJcblxyXG4gICAgYW55KHByZWRpY2F0ZT86IChpdGVtOiBLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPik9PiBib29sZWFuKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghcHJlZGljYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QubGVuZ3RoID4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLmxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZSh0aGlzLmxpc3RbaV0pKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgYWxsKHByZWRpY2F0ZT86IChpdGVtOiBLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPik9PiBib29sZWFuKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghcHJlZGljYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QubGVuZ3RoID4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHRoaXMubGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoIXByZWRpY2F0ZSh0aGlzLmxpc3RbaV0pKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9ICAgIFxyXG5cclxuICAgIHNpbmdsZShwcmVkaWNhdGU6IChpdGVtOiBLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPik9PiBib29sZWFuID0gbnVsbCkgOiBLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPiB7XHJcbiAgICAgICAgaWYgKHRoaXMubGlzdC5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBJVEVNX05PVF9GT1VORF9NU0c7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocHJlZGljYXRlKSB7XHJcbiAgICAgICAgICAgIGxldCBpdGVtID0gdGhpcy5zaW5nbGVPckRlZmF1bHQocHJlZGljYXRlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgSVRFTV9OT1RfRk9VTkRfTVNHO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdFswXTtcclxuICAgIH1cclxuXHJcbiAgICBmaXJzdChwcmVkaWNhdGU6IChpdGVtOiBLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPik9PiBib29sZWFuID0gbnVsbCkgOiBLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPiB7XHJcbiAgICAgICAgaWYgKHRoaXMubGlzdC5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBJVEVNX05PVF9GT1VORF9NU0c7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocHJlZGljYXRlKSB7XHJcbiAgICAgICAgICAgIGxldCBpdGVtID0gdGhpcy5maXJzdE9yRGVmYXVsdChwcmVkaWNhdGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBJVEVNX05PVF9GT1VORF9NU0c7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gdGhpcy5saXN0WzBdO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBsYXN0KHByZWRpY2F0ZTogKGl0ZW06IEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+KT0+IGJvb2xlYW4pIDogS2V5VmFsdWVQYWlyPFRLZXksIFRWYWx1ZT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmxpc3QubGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgSVRFTV9OT1RfRk9VTkRfTVNHO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHByZWRpY2F0ZSkge1xyXG4gICAgICAgICAgICBsZXQgaXRlbSA9IHRoaXMubGFzdE9yRGVmYXVsdChwcmVkaWNhdGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBJVEVNX05PVF9GT1VORF9NU0c7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdFt0aGlzLmxpc3QubGVuZ3RoIC0gMV07XHJcbiAgICB9ICAgIFxyXG5cclxuICAgIHNpbmdsZU9yRGVmYXVsdChwcmVkaWNhdGU6IChpdGVtOiBLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPik9PiBib29sZWFuKSA6IEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+IHtcclxuICAgICAgICBsZXQgdGVtcCA9IG5ldyBBcnJheTxLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPj4oKTtcclxuXHJcbiAgICAgICAgdGhpcy5saXN0LmZpbHRlcihlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShlbGVtZW50KSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGVtcC5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0ZW1wLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgdGhyb3cgTVVMVElQTEVfSU5TVEFOQ0VTX0ZPVU5EX01TRztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0ZW1wLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRlbXBbMF07XHJcbiAgICB9ICAgIFxyXG5cclxuICAgIGZpcnN0T3JEZWZhdWx0KHByZWRpY2F0ZTogKGl0ZW06IEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+KT0+IGJvb2xlYW4pIDogS2V5VmFsdWVQYWlyPFRLZXksIFRWYWx1ZT4geyAgICAgICAgXHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHRoaXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLmxpc3RbaV07XHJcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUoaXRlbSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBsYXN0T3JEZWZhdWx0KHByZWRpY2F0ZTogKGl0ZW06IEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+KT0+IGJvb2xlYW4pIDogS2V5VmFsdWVQYWlyPFRLZXksIFRWYWx1ZT4ge1xyXG4gICAgICAgIGZvciAobGV0IGk9dGhpcy5sZW5ndGg7IGk+PTA7IGktLSkge1xyXG4gICAgICAgICAgICBsZXQgaXRlbSA9IHRoaXMubGlzdFtpIC0gMV07XHJcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUoaXRlbSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0gICAgXHJcblxyXG4gICAgd2hlcmUocHJlZGljYXRlOiAoaXRlbTogS2V5VmFsdWVQYWlyPFRLZXksIFRWYWx1ZT4pPT4gYm9vbGVhbikgOiBJRGljdGlvbmFyeTxUS2V5LCBUVmFsdWU+IHtcclxuICAgICAgICBsZXQgdGVtcCA9IG5ldyBEaWN0aW9uYXJ5PFRLZXksIFRWYWx1ZT4oKTtcclxuXHJcbiAgICAgICAgdGhpcy5saXN0LmZpbHRlcihlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShlbGVtZW50KSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGVtcC5hZGQoZWxlbWVudC5rZXksIGVsZW1lbnQudmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0ZW1wO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdDxUUmVzdWx0PihwcmVkaWNhdGU6IChpdGVtOiBLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPik9PiBUUmVzdWx0KSA6IElFbnVtZXJhYmxlPFRSZXN1bHQ+IHtcclxuICAgICAgICBsZXQgdGVtcCA9IG5ldyBMaXN0PFRSZXN1bHQ+KCk7XHJcblxyXG4gICAgICAgIHRoaXMuZm9yRWFjaCh4ID0+IHRlbXAuYWRkKHByZWRpY2F0ZSh4KSkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGVtcDtcclxuICAgIH1cclxuXHJcbiAgICBmb3JFYWNoKHByZWRpY2F0ZTogKGl0ZW06IEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+KT0+IHZvaWQpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5saXN0LmZvckVhY2goeCA9PiBwcmVkaWNhdGUoeCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvQXJyYXkoKSA6IEFycmF5PEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBqb2luPFRPdXRlciwgVE1hdGNoLCBUUmVzdWx0PihvdXRlcjogSUVudW1lcmFibGU8VE91dGVyPiwgY29uZGl0aW9uSW5uZXI6IChpdGVtOiBLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPik9PiBUTWF0Y2gsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25PdXRlcjogKGl0ZW06IFRPdXRlcik9PiBUTWF0Y2gsIHNlbGVjdDogKHg6IEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+LCB5OlRPdXRlcik9PiBUUmVzdWx0LCBsZWZ0Sm9pbjogYm9vbGVhbiA9IGZhbHNlKSA6IElFbnVtZXJhYmxlPFRSZXN1bHQ+IHtcclxuICAgICAgICBsZXQgcmVzdWx0TGlzdCA9IG5ldyBMaXN0PFRSZXN1bHQ+KCk7XHJcblxyXG4gICAgICAgIHRoaXMubGlzdC5mb3JFYWNoKHggPT4ge1xyXG4gICAgICAgICAgICBsZXQgb3V0ZXJFbnRyaWVzID0gb3V0ZXIudG9BcnJheSgpLmZpbHRlcih5ID0+IGNvbmRpdGlvbklubmVyKHgpID09PSBjb25kaXRpb25PdXRlcih5KSk7XHJcblxyXG4gICAgICAgICAgICBpZiAobGVmdEpvaW4gJiYgb3V0ZXJFbnRyaWVzICYmIG91dGVyRW50cmllcy5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0TGlzdC5hZGQoc2VsZWN0KHgsIG51bGwpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG91dGVyRW50cmllcy5mb3JFYWNoKHogPT4gcmVzdWx0TGlzdC5hZGQoc2VsZWN0KHgsIHopKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0TGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBncm91cEJ5KHByZWRpY2F0ZTogKGl0ZW06IEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+KSA9PiBBcnJheTxhbnk+KSA6IElFbnVtZXJhYmxlPEdyb3VwPEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+Pj4ge1xyXG4gICAgICAgIGxldCBncm91cHMgPSB7fTtcclxuICAgICAgICB0aGlzLmxpc3QuZm9yRWFjaChmdW5jdGlvbiAobykge1xyXG4gICAgICAgICAgdmFyIGdyb3VwID0gSlNPTi5zdHJpbmdpZnkocHJlZGljYXRlKG8pKTtcclxuICAgICAgICAgIGdyb3Vwc1tncm91cF0gPSBncm91cHNbZ3JvdXBdIHx8IFtdO1xyXG4gICAgICAgICAgZ3JvdXBzW2dyb3VwXS5wdXNoKG8pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCBnID0gT2JqZWN0LmtleXMoZ3JvdXBzKS5tYXAoZnVuY3Rpb24gKGdyb3VwKSB7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgYSA9IGdyb3VwLnN1YnN0cigxLCBncm91cC5sZW5ndGggLSAyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBncnA9IG5ldyBHcm91cDxLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPj4oYS5zcGxpdCgnLCcpLCBncm91cHNbZ3JvdXBdKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBncnA7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgTGlzdDxHcm91cDxLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPj4+KGcpOyAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgb3JkZXJCeShjb21wYXJlcjogSUNvbXBhcmVyPEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+PikgOiBJRW51bWVyYWJsZTxLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPj4ge1xyXG4gICAgICAgIGxldCB0ZW1wID0gdGhpcy5saXN0LnNvcnQoKHgseSkgPT4gY29tcGFyZXIuY29tcGFyZSh4LCB5KSk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgTGlzdDxLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPj4odGVtcCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzdGluY3QoY29tcGFyZXI6IElFcXVhbGl0eUNvbXBhcmVyPEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+PikgOiBJRW51bWVyYWJsZTxLZXlWYWx1ZVBhaXI8VEtleSwgVFZhbHVlPj4ge1xyXG4gICAgICAgIGxldCB1bmlxdWVzID0gbmV3IExpc3Q8S2V5VmFsdWVQYWlyPFRLZXksIFRWYWx1ZT4+KCk7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoKHggPT4ge1xyXG4gICAgICAgICAgICB1bmlxdWVzLmZvckVhY2goeSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBhcmVyLmVxdWFscyh4LCB5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVuaXF1ZXMuYWRkKHgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHVuaXF1ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgdW5pb24obGlzdDogSUVudW1lcmFibGU8S2V5VmFsdWVQYWlyPFRLZXksIFRWYWx1ZT4+KSA6IElEaWN0aW9uYXJ5PFRLZXksIFRWYWx1ZT4ge1xyXG4gICAgICAgICB0aGlzLmFkZFJhbmdlKGxpc3QudG9BcnJheSgpKTtcclxuXHJcbiAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSAgICBcclxuXHJcbiAgICBza2lwKG5vOiBudW1iZXIpIDogSURpY3Rpb25hcnk8VEtleSwgVFZhbHVlPiB7XHJcbiAgICAgICAgaWYgKG5vID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERpY3Rpb25hcnkodGhpcy5saXN0LnNsaWNlKG5vLCB0aGlzLmxpc3QubGVuZ3RoIC0gMSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICB0YWtlKG5vOiBudW1iZXIpIDogSURpY3Rpb25hcnk8VEtleSwgVFZhbHVlPiB7XHJcbiAgICAgICAgaWYgKG5vID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERpY3Rpb25hcnkodGhpcy5saXN0LnNsaWNlKDAsIG5vKSk7XHJcbiAgICAgICAgfSAgICAgICAgXHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSAgICBcclxuXHJcbiAgICBzdW0ocHJlZGljYXRlOiAoaXRlbTogS2V5VmFsdWVQYWlyPFRLZXksIFRWYWx1ZT4pPT4gbnVtYmVyKSA6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHN1bTogbnVtYmVyID0gMDtcclxuICAgICAgICB0aGlzLmxpc3QuZm9yRWFjaCh4ID0+IHN1bSA9IHN1bSArIHByZWRpY2F0ZSh4KSk7XHJcblxyXG4gICAgICAgIHJldHVybiBzdW07XHJcbiAgICB9XHJcblxyXG4gICAgYXZnKHByZWRpY2F0ZTogKGl0ZW06IEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+KT0+IG51bWJlcikgOiBudW1iZXIgeyAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3VtKHByZWRpY2F0ZSkgLyB0aGlzLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBtaW4ocHJlZGljYXRlOiAoaXRlbTogS2V5VmFsdWVQYWlyPFRLZXksIFRWYWx1ZT4pPT4gbnVtYmVyKSA6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IG1pbjogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgdGhpcy5saXN0LmZvckVhY2goeCA9PiBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChpID09IDApIHtcclxuICAgICAgICAgICAgICAgIG1pbiA9IHByZWRpY2F0ZSh4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWwgPSBwcmVkaWNhdGUoeCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsIDwgbWluKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1pbjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgbWF4KHByZWRpY2F0ZTogKGl0ZW06IEtleVZhbHVlUGFpcjxUS2V5LCBUVmFsdWU+KT0+IG51bWJlcikgOiBudW1iZXIge1xyXG4gICAgICAgIGxldCBtYXg6IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgIHRoaXMubGlzdC5mb3JFYWNoKHggPT4gXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoaSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBtYXggPSBwcmVkaWNhdGUoeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsID0gcHJlZGljYXRlKHgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCA+IG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IHZhbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBtYXg7XHJcbiAgICB9XHJcblxyXG4gICAgY291bnQocHJlZGljYXRlOiAoaXRlbTogS2V5VmFsdWVQYWlyPFRLZXksIFRWYWx1ZT4pPT4gYm9vbGVhbiA9IG51bGwpIDogbnVtYmVyIHtcclxuICAgICAgICBpZiAoIXByZWRpY2F0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgY291bnQ6IG51bWJlciA9IDA7XHJcbiAgICAgICAgdGhpcy5saXN0LmZvckVhY2goeCA9PiB7XHJcbiAgICAgICAgICAgIGlmKHByZWRpY2F0ZSh4KSkge1xyXG4gICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gY291bnQ7XHJcbiAgICB9ICAgIFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgS2V5VmFsdWVQYWlyPFRLZXksIFRWYWx1ZT4ge1xyXG4gICAga2V5OiBUS2V5O1xyXG4gICAgdmFsdWU6IFRWYWx1ZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihrZXk6IFRLZXksIHZhbHVlOiBUVmFsdWUpIHtcclxuICAgICAgICB0aGlzLmtleSA9IGtleTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbn0iXX0=