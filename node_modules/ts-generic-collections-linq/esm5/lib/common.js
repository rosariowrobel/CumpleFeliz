/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { List } from './list';
/**
 * @template T
 */
var /**
 * @template T
 */
Group = /** @class */ (function () {
    function Group(groups, list) {
        this.list = new List();
        this.groups = groups;
        this.list = new List(list);
    }
    return Group;
}());
/**
 * @template T
 */
export { Group };
if (false) {
    /** @type {?} */
    Group.prototype.groups;
    /** @type {?} */
    Group.prototype.list;
}
/** @type {?} */
export var objCompare = (/**
 * @param {?} obj1
 * @param {?} obj2
 * @return {?}
 */
function (obj1, obj2) {
    //Loop through properties in object 1
    for (var p in obj1) {
        //Check property exists on both objects
        if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p))
            return false;
        switch (typeof (obj1[p])) {
            //Deep compare objects
            case 'object':
                if (!objCompare(obj1[p], obj2[p]))
                    return false;
                break;
            //Compare function code
            case 'function':
                if (typeof (obj2[p]) == 'undefined' || (p != 'compare' && obj1[p].toString() != obj2[p].toString()))
                    return false;
                break;
            //Compare values
            default:
                if (obj1[p] != obj2[p])
                    return false;
        }
    }
    //Check object 2 for any extra properties
    for (var p in obj2) {
        if (typeof (obj1[p]) == 'undefined')
            return false;
    }
    return true;
});
/** @type {?} */
export var ITEM_NOT_FOUND_MSG = "Item does not exist.";
/** @type {?} */
export var MULTIPLE_INSTANCES_FOUND_MSG = "Multiple instances of entity found.";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdHMtZ2VuZXJpYy1jb2xsZWN0aW9ucy1saW5xLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQzs7OztBQUU5Qjs7OztJQUlJLGVBQVksTUFBYSxFQUFFLElBQWM7UUFGekMsU0FBSSxHQUFtQixJQUFJLElBQUksRUFBSyxDQUFDO1FBR2pDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUksSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNMLFlBQUM7QUFBRCxDQUFDLEFBUkQsSUFRQzs7Ozs7OztJQVBHLHVCQUFjOztJQUNkLHFCQUFxQzs7O0FBUXpDLE1BQU0sS0FBSyxVQUFVOzs7OztBQUFHLFVBQVUsSUFBSSxFQUFFLElBQUk7SUFDM0MscUNBQXFDO0lBQ3JDLEtBQUssSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO1FBQ25CLHVDQUF1QztRQUN2QyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUVwRSxRQUFRLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN6QixzQkFBc0I7WUFDdEIsS0FBSyxRQUFRO2dCQUNaLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFBRSxPQUFPLEtBQUssQ0FBQztnQkFDaEQsTUFBTTtZQUNQLHVCQUF1QjtZQUN2QixLQUFLLFVBQVU7Z0JBQ2QsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxJQUFJLENBQUMsQ0FBQyxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO29CQUFFLE9BQU8sS0FBSyxDQUFDO2dCQUNsSCxNQUFNO1lBQ1AsZ0JBQWdCO1lBQ2hCO2dCQUNDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQUUsT0FBTyxLQUFLLENBQUM7U0FDdEM7S0FDRDtJQUVELHlDQUF5QztJQUN6QyxLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtRQUNuQixJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXO1lBQUUsT0FBTyxLQUFLLENBQUM7S0FDbEQ7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUMsQ0FBQTs7QUFFRCxNQUFNLEtBQU8sa0JBQWtCLEdBQVcsc0JBQXNCOztBQUNoRSxNQUFNLEtBQU8sNEJBQTRCLEdBQVcscUNBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUVudW1lcmFibGUsIElHcm91cCB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IExpc3QgfSBmcm9tICcuL2xpc3QnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdyb3VwPFQ+IGltcGxlbWVudHMgSUdyb3VwPFQ+IHtcclxuICAgIGdyb3VwczogYW55W107XHJcbiAgICBsaXN0OiBJRW51bWVyYWJsZTxUPiA9IG5ldyBMaXN0PFQ+KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZ3JvdXBzOiBhbnlbXSwgbGlzdDogQXJyYXk8VD4pIHtcclxuICAgICAgICB0aGlzLmdyb3VwcyA9IGdyb3VwcztcclxuICAgICAgICB0aGlzLmxpc3QgPSBuZXcgTGlzdDxUPihsaXN0KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBvYmpDb21wYXJlID0gZnVuY3Rpb24gKG9iajEsIG9iajIpIHtcclxuXHQvL0xvb3AgdGhyb3VnaCBwcm9wZXJ0aWVzIGluIG9iamVjdCAxXHJcblx0Zm9yICh2YXIgcCBpbiBvYmoxKSB7XHJcblx0XHQvL0NoZWNrIHByb3BlcnR5IGV4aXN0cyBvbiBib3RoIG9iamVjdHNcclxuXHRcdGlmIChvYmoxLmhhc093blByb3BlcnR5KHApICE9PSBvYmoyLmhhc093blByb3BlcnR5KHApKSByZXR1cm4gZmFsc2U7XHJcbiBcclxuXHRcdHN3aXRjaCAodHlwZW9mIChvYmoxW3BdKSkge1xyXG5cdFx0XHQvL0RlZXAgY29tcGFyZSBvYmplY3RzXHJcblx0XHRcdGNhc2UgJ29iamVjdCc6XHJcblx0XHRcdFx0aWYgKCFvYmpDb21wYXJlKG9iajFbcF0sIG9iajJbcF0pKSByZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdC8vQ29tcGFyZSBmdW5jdGlvbiBjb2RlXHJcblx0XHRcdGNhc2UgJ2Z1bmN0aW9uJzpcclxuXHRcdFx0XHRpZiAodHlwZW9mIChvYmoyW3BdKSA9PSAndW5kZWZpbmVkJyB8fCAocCAhPSAnY29tcGFyZScgJiYgb2JqMVtwXS50b1N0cmluZygpICE9IG9iajJbcF0udG9TdHJpbmcoKSkpIHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0Ly9Db21wYXJlIHZhbHVlc1xyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdGlmIChvYmoxW3BdICE9IG9iajJbcF0pIHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHR9XHJcbiBcclxuXHQvL0NoZWNrIG9iamVjdCAyIGZvciBhbnkgZXh0cmEgcHJvcGVydGllc1xyXG5cdGZvciAodmFyIHAgaW4gb2JqMikge1xyXG5cdFx0aWYgKHR5cGVvZiAob2JqMVtwXSkgPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcclxuXHR9XHJcblx0cmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgSVRFTV9OT1RfRk9VTkRfTVNHOiBzdHJpbmcgPSBcIkl0ZW0gZG9lcyBub3QgZXhpc3QuXCI7XHJcbmV4cG9ydCBjb25zdCBNVUxUSVBMRV9JTlNUQU5DRVNfRk9VTkRfTVNHOiBzdHJpbmcgPSBcIk11bHRpcGxlIGluc3RhbmNlcyBvZiBlbnRpdHkgZm91bmQuXCI7Il19