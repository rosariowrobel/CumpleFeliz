/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Group, ITEM_NOT_FOUND_MSG, MULTIPLE_INSTANCES_FOUND_MSG } from './common';
/**
 * @record
 * @template T
 */
export function IList() { }
if (false) {
    /**
     * @param {?} item
     * @return {?}
     */
    IList.prototype.add = function (item) { };
    /**
     * @param {?} items
     * @return {?}
     */
    IList.prototype.addRange = function (items) { };
    /**
     * @param {?} predicate
     * @return {?}
     */
    IList.prototype.remove = function (predicate) { };
    /**
     * @return {?}
     */
    IList.prototype.clear = function () { };
}
/**
 * @template T
 */
var /**
 * @template T
 */
List = /** @class */ (function () {
    function List(array) {
        if (array === void 0) { array = null; }
        this.list = new Array();
        if (array)
            this.list = array;
    }
    /* IList */
    /* IList */
    /**
     * @param {?} item
     * @return {?}
     */
    List.prototype.add = /* IList */
    /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.list.push(item);
    };
    /**
     * @param {?} items
     * @return {?}
     */
    List.prototype.addRange = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        items.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return _this.add(x); }));
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    List.prototype.remove = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var temp = new Array();
        this.list.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (!predicate(element)) {
                temp.push(element);
            }
        }));
        this.list = temp;
    };
    /**
     * @return {?}
     */
    List.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.list = new Array();
    };
    /* IEnumerable */
    /* IEnumerable */
    /**
     * @return {?}
     */
    List.prototype.asEnumerable = /* IEnumerable */
    /**
     * @return {?}
     */
    function () {
        return this;
    };
    Object.defineProperty(List.prototype, "length", {
        get: /**
         * @return {?}
         */
        function () {
            return this.list.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} index
     * @return {?}
     */
    List.prototype.elementAt = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        try {
            return this.list[index];
        }
        catch (e) {
            return null;
        }
    };
    /**
     * @param {?=} predicate
     * @return {?}
     */
    List.prototype.any = /**
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (!predicate) {
            return this.list.length > 0;
        }
        for (var i = 0; i < this.list.length; i++) {
            if (predicate(this.list[i])) {
                return true;
            }
        }
        return false;
    };
    /**
     * @param {?=} predicate
     * @return {?}
     */
    List.prototype.all = /**
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (!predicate) {
            return this.list.length > 0;
        }
        for (var i = 0; i < this.list.length; i++) {
            if (!predicate(this.list[i])) {
                return false;
            }
        }
        return true;
    };
    /**
     * @param {?=} predicate
     * @return {?}
     */
    List.prototype.single = /**
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (predicate === void 0) { predicate = null; }
        if (this.list.length <= 0) {
            throw ITEM_NOT_FOUND_MSG;
        }
        if (predicate) {
            /** @type {?} */
            var item = this.singleOrDefault(predicate);
            if (!item) {
                throw ITEM_NOT_FOUND_MSG;
            }
            return item;
        }
        return this.list[0];
    };
    /**
     * @param {?=} predicate
     * @return {?}
     */
    List.prototype.first = /**
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (predicate === void 0) { predicate = null; }
        if (this.list.length <= 0) {
            throw ITEM_NOT_FOUND_MSG;
        }
        if (predicate) {
            /** @type {?} */
            var item = this.firstOrDefault(predicate);
            if (!item) {
                throw ITEM_NOT_FOUND_MSG;
            }
            return item;
        }
        return this.list[0];
    };
    /**
     * @param {?=} predicate
     * @return {?}
     */
    List.prototype.last = /**
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (predicate === void 0) { predicate = null; }
        if (this.list.length <= 0) {
            throw ITEM_NOT_FOUND_MSG;
        }
        if (predicate) {
            /** @type {?} */
            var item = this.lastOrDefault(predicate);
            if (!item) {
                throw ITEM_NOT_FOUND_MSG;
            }
            return item;
        }
        return this.list[this.list.length - 1];
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    List.prototype.singleOrDefault = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var temp = new Array();
        this.list.filter((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (predicate(element)) {
                temp.push(element);
            }
        }));
        if (temp.length > 1) {
            throw MULTIPLE_INSTANCES_FOUND_MSG;
        }
        if (temp.length <= 0) {
            return null;
        }
        return temp[0];
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    List.prototype.firstOrDefault = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        for (var i = 0; i < this.length; i++) {
            /** @type {?} */
            var item = this.list[i];
            if (predicate(item)) {
                return item;
            }
        }
        return null;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    List.prototype.lastOrDefault = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        for (var i = this.length; i >= 0; i--) {
            /** @type {?} */
            var item = this.list[i - 1];
            if (predicate(item)) {
                return item;
            }
        }
        return null;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    List.prototype.where = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var temp = new List();
        this.list.filter((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (predicate(element)) {
                temp.add(element);
            }
        }));
        return temp;
    };
    /**
     * @template TResult
     * @param {?} predicate
     * @return {?}
     */
    List.prototype.select = /**
     * @template TResult
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var temp = new List();
        this.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return temp.add(predicate(x)); }));
        return temp;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    List.prototype.forEach = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return predicate(x); }));
    };
    /**
     * @return {?}
     */
    List.prototype.toArray = /**
     * @return {?}
     */
    function () {
        return this.list;
    };
    /**
     * @template TOuter, TMatch, TResult
     * @param {?} outer
     * @param {?} conditionInner
     * @param {?} conditionOuter
     * @param {?} select
     * @param {?=} leftJoin
     * @return {?}
     */
    List.prototype.join = /**
     * @template TOuter, TMatch, TResult
     * @param {?} outer
     * @param {?} conditionInner
     * @param {?} conditionOuter
     * @param {?} select
     * @param {?=} leftJoin
     * @return {?}
     */
    function (outer, conditionInner, conditionOuter, select, leftJoin) {
        if (leftJoin === void 0) { leftJoin = false; }
        /** @type {?} */
        var resultList = new List();
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            /** @type {?} */
            var outerEntries = outer.toArray().filter((/**
             * @param {?} y
             * @return {?}
             */
            function (y) { return conditionInner(x) === conditionOuter(y); }));
            if (leftJoin && outerEntries && outerEntries.length <= 0) {
                resultList.add(select(x, null));
            }
            else {
                outerEntries.forEach((/**
                 * @param {?} z
                 * @return {?}
                 */
                function (z) { return resultList.add(select(x, z)); }));
            }
        }));
        return resultList;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    List.prototype.groupBy = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var groups = {};
        this.list.forEach((/**
         * @param {?} o
         * @return {?}
         */
        function (o) {
            /** @type {?} */
            var group = JSON.stringify(predicate(o));
            groups[group] = groups[group] || [];
            groups[group].push(o);
        }));
        /** @type {?} */
        var g = Object.keys(groups).map((/**
         * @param {?} group
         * @return {?}
         */
        function (group) {
            /** @type {?} */
            var a = group.substr(1, group.length - 2);
            /** @type {?} */
            var grp = new Group(a.split(','), groups[group]);
            return grp;
        }));
        return new List(g);
    };
    /**
     * @param {?} comparer
     * @return {?}
     */
    List.prototype.orderBy = /**
     * @param {?} comparer
     * @return {?}
     */
    function (comparer) {
        /** @type {?} */
        var temp = this.list.sort((/**
         * @param {?} x
         * @param {?} y
         * @return {?}
         */
        function (x, y) { return comparer.compare(x, y); }));
        return new List(temp);
    };
    /**
     * @param {?} list
     * @return {?}
     */
    List.prototype.union = /**
     * @param {?} list
     * @return {?}
     */
    function (list) {
        this.addRange(list.toArray());
        return this;
    };
    /**
     * @param {?} comparer
     * @return {?}
     */
    List.prototype.distinct = /**
     * @param {?} comparer
     * @return {?}
     */
    function (comparer) {
        /** @type {?} */
        var uniques = new List();
        this.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            uniques.forEach((/**
             * @param {?} y
             * @return {?}
             */
            function (y) {
                if (!comparer.equals(x, y)) {
                    uniques.add(x);
                }
            }));
        }));
        return uniques;
    };
    /**
     * @param {?} no
     * @return {?}
     */
    List.prototype.skip = /**
     * @param {?} no
     * @return {?}
     */
    function (no) {
        if (no > 0) {
            return new List(this.list.slice(no, this.list.length - 1));
        }
        return this;
    };
    /**
     * @param {?} no
     * @return {?}
     */
    List.prototype.take = /**
     * @param {?} no
     * @return {?}
     */
    function (no) {
        if (no > 0) {
            return new List(this.list.slice(0, no));
        }
        return this;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    List.prototype.sum = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var sum = 0;
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return sum = sum + predicate(x); }));
        return sum;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    List.prototype.avg = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        return this.sum(predicate) / this.length;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    List.prototype.min = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var min = 0;
        /** @type {?} */
        var i = 0;
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            if (i == 0) {
                min = predicate(x);
            }
            else {
                /** @type {?} */
                var val = predicate(x);
                if (val < min) {
                    min = val;
                }
            }
            i++;
        }));
        return min;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    List.prototype.max = /**
     * @param {?} predicate
     * @return {?}
     */
    function (predicate) {
        /** @type {?} */
        var max = 0;
        /** @type {?} */
        var i = 0;
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            if (i == 0) {
                max = predicate(x);
            }
            else {
                /** @type {?} */
                var val = predicate(x);
                if (val > max) {
                    max = val;
                }
            }
            i++;
        }));
        return max;
    };
    /**
     * @param {?=} predicate
     * @return {?}
     */
    List.prototype.count = /**
     * @param {?=} predicate
     * @return {?}
     */
    function (predicate) {
        if (predicate === void 0) { predicate = null; }
        if (!predicate) {
            return this.length;
        }
        /** @type {?} */
        var count = 0;
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            if (predicate(x)) {
                count++;
            }
        }));
        return count;
    };
    return List;
}());
/**
 * @template T
 */
export { List };
if (false) {
    /**
     * @type {?}
     * @private
     */
    List.prototype.list;
}
//# sourceMappingURL=data:application/json;base64,