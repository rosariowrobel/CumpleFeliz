{"version":3,"sources":["ng://ts-generic-collections-linq/lib/list.ts","ng://ts-generic-collections-linq/lib/common.ts","ng://ts-generic-collections-linq/lib/dictionary.ts"],"names":["List","prototype","add","item","this","list","push","addRange","items","_this","forEach","x","remove","predicate","temp","Array","element","clear","asEnumerable","Object","defineProperty","length","elementAt","index","e","any","i","all","single","ITEM_NOT_FOUND_MSG","singleOrDefault","first","firstOrDefault","last","lastOrDefault","filter","MULTIPLE_INSTANCES_FOUND_MSG","where","select","toArray","join","outer","conditionInner","conditionOuter","leftJoin","resultList","outerEntries","y","z","groupBy","groups","o","group","JSON","stringify","keys","map","a","substr","Group","split","orderBy","comparer","sort","compare","union","distinct","uniques","equals","skip","no","slice","take","sum","avg","min","val","max","count","array","objCompare","obj1","obj2","p","hasOwnProperty","toString","Dictionary","key","value","pair","KeyValuePair","containsKey","containsValue","tryGetValue","g"],"mappings":"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","sourcesContent":["import { IEnumerable, IComparer, IEqualityComparer } from './interfaces';\r\nimport { Group, objCompare, ITEM_NOT_FOUND_MSG, MULTIPLE_INSTANCES_FOUND_MSG } from './common';\r\n\r\nexport interface IList<T> extends IEnumerable<T> {\r\n    add(item: T) : void;\r\n    addRange(items: T[]) : void;\r\n    remove(predicate: (item:T) => boolean) : void;\r\n    clear() : void;    \r\n}\r\n\r\nexport class List<T> implements IList<T> {\r\n\r\n    private list: Array<T> = new Array<T>();    \r\n\r\n    constructor(array: Array<T> = null) {\r\n        if (array)\r\n            this.list = array;\r\n    }\r\n\r\n    /* IList */\r\n\r\n    add(item: T) : void {\r\n        this.list.push(item);\r\n    }\r\n\r\n    addRange(items: T[]) : void {\r\n        items.forEach(x => this.add(x));\r\n    }\r\n\r\n    remove(predicate: (item:T) => boolean) : void {\r\n        let temp = new Array<T>();\r\n\r\n        this.list.forEach(element => {\r\n            if (!predicate(element))\r\n            {\r\n                temp.push(element);\r\n            }\r\n        });\r\n\r\n        this.list = temp;\r\n    }\r\n\r\n    clear() : void {\r\n        this.list = new Array<T>();\r\n    }\r\n\r\n    /* IEnumerable */\r\n\r\n    asEnumerable() : IEnumerable<T> {\r\n        return this;\r\n    }\r\n\r\n    get length(): number {\r\n        return this.list.length;\r\n    }\r\n\r\n    elementAt(index: number) : T {\r\n        try {\r\n            return this.list[index];\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    any(predicate?: (item: T)=> boolean) : boolean {\r\n        if (!predicate) {\r\n            return this.list.length > 0;\r\n        }\r\n\r\n        for (let i=0; i<this.list.length; i++) {\r\n            if (predicate(this.list[i]))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    all(predicate?: (item: T)=> boolean) : boolean {\r\n        if (!predicate) {\r\n            return this.list.length > 0;\r\n        }\r\n        \r\n        for (let i=0; i<this.list.length; i++) {\r\n            if (!predicate(this.list[i]))\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    single(predicate: (item: T)=> boolean = null) : T {\r\n        if (this.list.length <= 0) {\r\n            throw ITEM_NOT_FOUND_MSG;\r\n        }\r\n\r\n        if (predicate) {\r\n            let item = this.singleOrDefault(predicate);\r\n\r\n            if (!item) {\r\n                throw ITEM_NOT_FOUND_MSG;\r\n            }\r\n\r\n            return item;\r\n        }\r\n        \r\n        return this.list[0];\r\n    }\r\n\r\n    first(predicate: (item: T)=> boolean = null) : T {\r\n        if (this.list.length <= 0) {\r\n            throw ITEM_NOT_FOUND_MSG;\r\n        }\r\n\r\n        if (predicate) {\r\n            let item = this.firstOrDefault(predicate);\r\n\r\n            if (!item) {\r\n                throw ITEM_NOT_FOUND_MSG;\r\n            }\r\n\r\n            return item;\r\n        }\r\n        \r\n        return this.list[0];\r\n    }\r\n    \r\n    last(predicate: (item: T)=> boolean = null) : T {\r\n        if (this.list.length <= 0) {\r\n            throw ITEM_NOT_FOUND_MSG;\r\n        }\r\n\r\n        if (predicate) {\r\n            let item = this.lastOrDefault(predicate);\r\n\r\n            if (!item) {\r\n                throw ITEM_NOT_FOUND_MSG;\r\n            }\r\n\r\n            return item;\r\n        }\r\n\r\n        return this.list[this.list.length - 1];\r\n    }    \r\n\r\n    singleOrDefault(predicate: (item: T)=> boolean) : T {\r\n        let temp = new Array<T>();\r\n\r\n        this.list.filter(element => {\r\n            if (predicate(element))\r\n            {\r\n                temp.push(element);\r\n            }\r\n        });\r\n\r\n        if (temp.length > 1) {\r\n            throw MULTIPLE_INSTANCES_FOUND_MSG;\r\n        }\r\n\r\n        if (temp.length <= 0) {\r\n            return null;\r\n        }\r\n\r\n        return temp[0];\r\n    }    \r\n\r\n    firstOrDefault(predicate: (item: T)=> boolean) : T {\r\n        for (let i=0; i<this.length; i++) {\r\n            let item = this.list[i];\r\n            if (predicate(item))\r\n            {\r\n                return item;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    lastOrDefault(predicate: (item: T)=> boolean) : T {\r\n        for (let i=this.length; i>=0; i--) {\r\n            let item = this.list[i - 1];\r\n            if (predicate(item))\r\n            {\r\n                return item;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }    \r\n\r\n    where(predicate: (item: T)=> boolean) : IEnumerable<T> {\r\n        let temp = new List<T>();\r\n\r\n        this.list.filter(element => {\r\n            if (predicate(element))\r\n            {\r\n                temp.add(element);\r\n            }\r\n        });\r\n\r\n        return temp;\r\n    }\r\n\r\n    select<TResult>(predicate: (item: T)=> TResult) : IEnumerable<TResult> {\r\n        let temp = new List<TResult>();\r\n\r\n        this.forEach(x => temp.add(predicate(x)));\r\n\r\n        return temp;\r\n    }\r\n\r\n    forEach(predicate: (item: T)=> void) : void {\r\n        this.list.forEach(x => predicate(x));\r\n    }\r\n\r\n    toArray() : Array<T> {\r\n        return this.list;\r\n    }\r\n\r\n    join<TOuter, TMatch, TResult>(outer: IEnumerable<TOuter>, conditionInner: (item: T)=> TMatch, \r\n                                    conditionOuter: (item: TOuter)=> TMatch, select: (x: T, y:TOuter)=> TResult, leftJoin: boolean = false) : IEnumerable<TResult> {\r\n        let resultList = new List<TResult>();\r\n\r\n        this.list.forEach(x => {\r\n            let outerEntries = outer.toArray().filter(y => conditionInner(x) === conditionOuter(y));\r\n\r\n            if (leftJoin && outerEntries && outerEntries.length <= 0) {\r\n                resultList.add(select(x, null));\r\n            }\r\n            else {\r\n                outerEntries.forEach(z => resultList.add(select(x, z)));\r\n            }\r\n        })\r\n\r\n        return resultList;\r\n    }\r\n\r\n    groupBy(predicate: (item: T) => Array<any>) : IEnumerable<Group<T>> {\r\n        let groups = {};\r\n        this.list.forEach(function (o) {\r\n          var group = JSON.stringify(predicate(o));\r\n          groups[group] = groups[group] || [];\r\n          groups[group].push(o);\r\n        });\r\n        let g = Object.keys(groups).map(function (group) {                \r\n            let a = group.substr(1, group.length - 2);\r\n\r\n            let grp= new Group<T>(a.split(','), groups[group]);\r\n\r\n            return grp;\r\n        });\r\n\r\n        return new List<Group<T>>(g);        \r\n    }\r\n\r\n    orderBy(comparer: IComparer<T>) : IEnumerable<T> {\r\n        let temp = this.list.sort((x,y) => comparer.compare(x, y));\r\n\r\n        return new List<T>(temp);\r\n    }\r\n\r\n    union(list: IEnumerable<T>) : IEnumerable<T> {\r\n        this.addRange(list.toArray());\r\n\r\n         return this;\r\n    }\r\n\r\n    distinct(comparer: IEqualityComparer<T>) : IEnumerable<T> {\r\n        let uniques = new List<T>();\r\n        this.forEach(x => {\r\n            uniques.forEach(y => {\r\n                if (!comparer.equals(x, y)) {\r\n                    uniques.add(x);\r\n                }\r\n            });\r\n        });\r\n\r\n        return uniques;\r\n    }\r\n\r\n    skip(no: number) : IEnumerable<T> {\r\n        if (no > 0) {\r\n            return new List(this.list.slice(no, this.list.length - 1));\r\n        }\r\n        \r\n        return this;\r\n    }\r\n\r\n    take(no: number) : IEnumerable<T> {\r\n        if (no > 0) {\r\n            return new List(this.list.slice(0, no));\r\n        }        \r\n\r\n        return this;\r\n    }\r\n\r\n    sum(predicate: (item: T)=> number) : number {\r\n        let sum: number = 0;\r\n        this.list.forEach(x => sum = sum + predicate(x));\r\n\r\n        return sum;\r\n    }\r\n\r\n    avg(predicate: (item: T)=> number) : number {        \r\n        return this.sum(predicate) / this.length;\r\n    }\r\n\r\n    min(predicate: (item: T)=> number) : number {\r\n        let min: number = 0;\r\n        let i = 0;\r\n        this.list.forEach(x => \r\n        {\r\n            if (i == 0) {\r\n                min = predicate(x);\r\n            }\r\n            else {\r\n                let val = predicate(x);\r\n                if (val < min) {\r\n                    min = val;\r\n                }\r\n            }            \r\n            i++;\r\n        });\r\n\r\n        return min;\r\n    }\r\n    \r\n    max(predicate: (item: T)=> number) : number {\r\n        let max: number = 0;\r\n        let i = 0;\r\n        this.list.forEach(x => \r\n        {\r\n            if (i == 0) {\r\n                max = predicate(x);\r\n            }\r\n            else {\r\n                let val = predicate(x);\r\n                if (val > max) {\r\n                    max = val;\r\n                }\r\n            }            \r\n            i++;\r\n        });\r\n\r\n        return max;\r\n    }    \r\n    \r\n    count(predicate: (item: T)=> boolean = null) : number {\r\n        if (!predicate) {\r\n            return this.length;\r\n        }\r\n\r\n        let count: number = 0;\r\n        this.list.forEach(x => {\r\n            if(predicate(x)) {\r\n                count++;\r\n            }\r\n        });\r\n\r\n        return count;\r\n    }\r\n\r\n}","import { IEnumerable, IGroup } from './interfaces';\r\nimport { List } from './list';\r\n\r\nexport class Group<T> implements IGroup<T> {\r\n    groups: any[];\r\n    list: IEnumerable<T> = new List<T>();\r\n\r\n    constructor(groups: any[], list: Array<T>) {\r\n        this.groups = groups;\r\n        this.list = new List<T>(list);\r\n    }\r\n}\r\n\r\nexport var objCompare = function (obj1, obj2) {\r\n\t//Loop through properties in object 1\r\n\tfor (var p in obj1) {\r\n\t\t//Check property exists on both objects\r\n\t\tif (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) return false;\r\n \r\n\t\tswitch (typeof (obj1[p])) {\r\n\t\t\t//Deep compare objects\r\n\t\t\tcase 'object':\r\n\t\t\t\tif (!objCompare(obj1[p], obj2[p])) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t//Compare function code\r\n\t\t\tcase 'function':\r\n\t\t\t\tif (typeof (obj2[p]) == 'undefined' || (p != 'compare' && obj1[p].toString() != obj2[p].toString())) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t//Compare values\r\n\t\t\tdefault:\r\n\t\t\t\tif (obj1[p] != obj2[p]) return false;\r\n\t\t}\r\n\t}\r\n \r\n\t//Check object 2 for any extra properties\r\n\tfor (var p in obj2) {\r\n\t\tif (typeof (obj1[p]) == 'undefined') return false;\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nexport const ITEM_NOT_FOUND_MSG: string = \"Item does not exist.\";\r\nexport const MULTIPLE_INSTANCES_FOUND_MSG: string = \"Multiple instances of entity found.\";","import { IEnumerable, IComparer, IEqualityComparer } from './interfaces';\r\nimport { List } from './list';\r\nimport { Group, objCompare, ITEM_NOT_FOUND_MSG, MULTIPLE_INSTANCES_FOUND_MSG } from './common';\r\n\r\nexport interface IDictionary<TKey, TValue> extends IEnumerable<KeyValuePair<TKey, TValue>> {\r\n    add(key: TKey, value: TValue) : void;\r\n    addRange(items: KeyValuePair<TKey, TValue>[]) : void;\r\n    remove(predicate: (item:KeyValuePair<TKey, TValue>) => boolean) : void;\r\n    clear() : void;\r\n\r\n    containsKey(key: TKey) : boolean;\r\n    containsValue(value: TValue) : boolean;\r\n    tryGetValue(key: TKey) : TValue;\r\n}\r\n\r\nexport class Dictionary<TKey, TValue> implements IDictionary<TKey, TValue>\r\n{\r\n    private list: Array<KeyValuePair<TKey, TValue>> = new Array<KeyValuePair<TKey, TValue>>();\r\n\r\n    constructor(list: Array<KeyValuePair<TKey, TValue>> = null) {\r\n        if (list) {\r\n            this.list = list;\r\n        }        \r\n    }\r\n\r\n    /* IList */\r\n\r\n    add(key: TKey, value: TValue) : void {\r\n        let pair = new KeyValuePair<TKey, TValue>(key, value);\r\n\r\n        if (this.containsKey(key)) {\r\n            throw \"Duplicate key. Cannot add.\"\r\n        }\r\n\r\n        this.list.push(pair);\r\n    }\r\n\r\n    addRange(items: KeyValuePair<TKey, TValue>[]) : void {\r\n        items.forEach(x => this.add(x.key, x.value));\r\n    }\r\n\r\n    clear() : void {\r\n        this.list = new Array<KeyValuePair<TKey, TValue>>();\r\n    }    \r\n\r\n    remove(predicate: (item:KeyValuePair<TKey, TValue>) => boolean) : void {\r\n        let temp = new Array<KeyValuePair<TKey, TValue>>();\r\n\r\n        this.list.forEach(element => {\r\n            if (!predicate(element))\r\n            {\r\n                temp.push(element);\r\n            }\r\n        });\r\n\r\n        this.list = temp;\r\n    }    \r\n\r\n    containsKey(key: TKey) : boolean {\r\n        return this.any(x => objCompare(x.key, key));\r\n    }\r\n\r\n    containsValue(value: TValue) : boolean {\r\n        return this.any(x => objCompare(x.value, value));\r\n    }\r\n\r\n    tryGetValue(key: TKey) : TValue {\r\n        let item = this.singleOrDefault(x => objCompare(x.key, key));\r\n\r\n        if (item) {\r\n            return item.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /* IEnumerable */\r\n\r\n    asEnumerable() : IEnumerable<KeyValuePair<TKey, TValue>> {\r\n        return this;\r\n    }\r\n\r\n    get length(): number {\r\n        return this.list.length;\r\n    }\r\n\r\n    elementAt(index: number) : KeyValuePair<TKey, TValue> {\r\n        try {\r\n            return this.list[index];\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }    \r\n\r\n    any(predicate?: (item: KeyValuePair<TKey, TValue>)=> boolean) : boolean {\r\n        if (!predicate) {\r\n            return this.list.length > 0;\r\n        }\r\n\r\n        for (let i=0; i<this.list.length; i++) {\r\n            if (predicate(this.list[i]))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    all(predicate?: (item: KeyValuePair<TKey, TValue>)=> boolean) : boolean {\r\n        if (!predicate) {\r\n            return this.list.length > 0;\r\n        }\r\n        \r\n        for (let i=0; i<this.list.length; i++) {\r\n            if (!predicate(this.list[i]))\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }    \r\n\r\n    single(predicate: (item: KeyValuePair<TKey, TValue>)=> boolean = null) : KeyValuePair<TKey, TValue> {\r\n        if (this.list.length <= 0) {\r\n            throw ITEM_NOT_FOUND_MSG;\r\n        }\r\n\r\n        if (predicate) {\r\n            let item = this.singleOrDefault(predicate);\r\n\r\n            if (!item) {\r\n                throw ITEM_NOT_FOUND_MSG;\r\n            }\r\n\r\n            return item;\r\n        }\r\n        \r\n        return this.list[0];\r\n    }\r\n\r\n    first(predicate: (item: KeyValuePair<TKey, TValue>)=> boolean = null) : KeyValuePair<TKey, TValue> {\r\n        if (this.list.length <= 0) {\r\n            throw ITEM_NOT_FOUND_MSG;\r\n        }\r\n\r\n        if (predicate) {\r\n            let item = this.firstOrDefault(predicate);\r\n\r\n            if (!item) {\r\n                throw ITEM_NOT_FOUND_MSG;\r\n            }\r\n\r\n            return item;\r\n        }\r\n        \r\n        return this.list[0];\r\n    }\r\n    \r\n    last(predicate: (item: KeyValuePair<TKey, TValue>)=> boolean) : KeyValuePair<TKey, TValue> {\r\n        if (this.list.length <= 0) {\r\n            throw ITEM_NOT_FOUND_MSG;\r\n        }\r\n\r\n        if (predicate) {\r\n            let item = this.lastOrDefault(predicate);\r\n\r\n            if (!item) {\r\n                throw ITEM_NOT_FOUND_MSG;\r\n            }\r\n\r\n            return item;\r\n        }\r\n\r\n        return this.list[this.list.length - 1];\r\n    }    \r\n\r\n    singleOrDefault(predicate: (item: KeyValuePair<TKey, TValue>)=> boolean) : KeyValuePair<TKey, TValue> {\r\n        let temp = new Array<KeyValuePair<TKey, TValue>>();\r\n\r\n        this.list.filter(element => {\r\n            if (predicate(element))\r\n            {\r\n                temp.push(element);\r\n            }\r\n        });\r\n\r\n        if (temp.length > 1) {\r\n            throw MULTIPLE_INSTANCES_FOUND_MSG;\r\n        }\r\n\r\n        if (temp.length <= 0) {\r\n            return null;\r\n        }\r\n\r\n        return temp[0];\r\n    }    \r\n\r\n    firstOrDefault(predicate: (item: KeyValuePair<TKey, TValue>)=> boolean) : KeyValuePair<TKey, TValue> {        \r\n        for (let i=0; i<this.length; i++) {\r\n            let item = this.list[i];\r\n            if (predicate(item))\r\n            {\r\n                return item;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    lastOrDefault(predicate: (item: KeyValuePair<TKey, TValue>)=> boolean) : KeyValuePair<TKey, TValue> {\r\n        for (let i=this.length; i>=0; i--) {\r\n            let item = this.list[i - 1];\r\n            if (predicate(item))\r\n            {\r\n                return item;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }    \r\n\r\n    where(predicate: (item: KeyValuePair<TKey, TValue>)=> boolean) : IDictionary<TKey, TValue> {\r\n        let temp = new Dictionary<TKey, TValue>();\r\n\r\n        this.list.filter(element => {\r\n            if (predicate(element))\r\n            {\r\n                temp.add(element.key, element.value);\r\n            }\r\n        });\r\n\r\n        return temp;\r\n    }\r\n\r\n    select<TResult>(predicate: (item: KeyValuePair<TKey, TValue>)=> TResult) : IEnumerable<TResult> {\r\n        let temp = new List<TResult>();\r\n\r\n        this.forEach(x => temp.add(predicate(x)));\r\n\r\n        return temp;\r\n    }\r\n\r\n    forEach(predicate: (item: KeyValuePair<TKey, TValue>)=> void) : void {\r\n        this.list.forEach(x => predicate(x));\r\n    }\r\n\r\n    toArray() : Array<KeyValuePair<TKey, TValue>> {\r\n        return this.list;\r\n    }\r\n\r\n    join<TOuter, TMatch, TResult>(outer: IEnumerable<TOuter>, conditionInner: (item: KeyValuePair<TKey, TValue>)=> TMatch, \r\n                                    conditionOuter: (item: TOuter)=> TMatch, select: (x: KeyValuePair<TKey, TValue>, y:TOuter)=> TResult, leftJoin: boolean = false) : IEnumerable<TResult> {\r\n        let resultList = new List<TResult>();\r\n\r\n        this.list.forEach(x => {\r\n            let outerEntries = outer.toArray().filter(y => conditionInner(x) === conditionOuter(y));\r\n\r\n            if (leftJoin && outerEntries && outerEntries.length <= 0) {\r\n                resultList.add(select(x, null));\r\n            }\r\n            else {\r\n                outerEntries.forEach(z => resultList.add(select(x, z)));\r\n            }\r\n        })\r\n\r\n        return resultList;\r\n    }\r\n\r\n    groupBy(predicate: (item: KeyValuePair<TKey, TValue>) => Array<any>) : IEnumerable<Group<KeyValuePair<TKey, TValue>>> {\r\n        let groups = {};\r\n        this.list.forEach(function (o) {\r\n          var group = JSON.stringify(predicate(o));\r\n          groups[group] = groups[group] || [];\r\n          groups[group].push(o);\r\n        });\r\n        let g = Object.keys(groups).map(function (group) {                \r\n            let a = group.substr(1, group.length - 2);\r\n\r\n            let grp= new Group<KeyValuePair<TKey, TValue>>(a.split(','), groups[group]);\r\n\r\n            return grp;\r\n        });\r\n\r\n        return new List<Group<KeyValuePair<TKey, TValue>>>(g);        \r\n    }\r\n\r\n    orderBy(comparer: IComparer<KeyValuePair<TKey, TValue>>) : IEnumerable<KeyValuePair<TKey, TValue>> {\r\n        let temp = this.list.sort((x,y) => comparer.compare(x, y));\r\n\r\n        return new List<KeyValuePair<TKey, TValue>>(temp);\r\n    }\r\n\r\n    distinct(comparer: IEqualityComparer<KeyValuePair<TKey, TValue>>) : IEnumerable<KeyValuePair<TKey, TValue>> {\r\n        let uniques = new List<KeyValuePair<TKey, TValue>>();\r\n        this.forEach(x => {\r\n            uniques.forEach(y => {\r\n                if (!comparer.equals(x, y)) {\r\n                    uniques.add(x);\r\n                }\r\n            });\r\n        });\r\n\r\n        return uniques;\r\n    }\r\n\r\n    union(list: IEnumerable<KeyValuePair<TKey, TValue>>) : IDictionary<TKey, TValue> {\r\n         this.addRange(list.toArray());\r\n\r\n         return this;\r\n    }    \r\n\r\n    skip(no: number) : IDictionary<TKey, TValue> {\r\n        if (no > 0) {\r\n            return new Dictionary(this.list.slice(no, this.list.length - 1));\r\n        }\r\n        \r\n        return this;\r\n    }\r\n\r\n    take(no: number) : IDictionary<TKey, TValue> {\r\n        if (no > 0) {\r\n            return new Dictionary(this.list.slice(0, no));\r\n        }        \r\n\r\n        return this;\r\n    }    \r\n\r\n    sum(predicate: (item: KeyValuePair<TKey, TValue>)=> number) : number {\r\n        let sum: number = 0;\r\n        this.list.forEach(x => sum = sum + predicate(x));\r\n\r\n        return sum;\r\n    }\r\n\r\n    avg(predicate: (item: KeyValuePair<TKey, TValue>)=> number) : number {        \r\n        return this.sum(predicate) / this.length;\r\n    }\r\n\r\n    min(predicate: (item: KeyValuePair<TKey, TValue>)=> number) : number {\r\n        let min: number = 0;\r\n        let i = 0;\r\n        this.list.forEach(x => \r\n        {\r\n            if (i == 0) {\r\n                min = predicate(x);\r\n            }\r\n            else {\r\n                let val = predicate(x);\r\n                if (val < min) {\r\n                    min = val;\r\n                }\r\n            }            \r\n            i++;\r\n        });\r\n\r\n        return min;\r\n    }\r\n    \r\n    max(predicate: (item: KeyValuePair<TKey, TValue>)=> number) : number {\r\n        let max: number = 0;\r\n        let i = 0;\r\n        this.list.forEach(x => \r\n        {\r\n            if (i == 0) {\r\n                max = predicate(x);\r\n            }\r\n            else {\r\n                let val = predicate(x);\r\n                if (val > max) {\r\n                    max = val;\r\n                }\r\n            }            \r\n            i++;\r\n        });\r\n\r\n        return max;\r\n    }\r\n\r\n    count(predicate: (item: KeyValuePair<TKey, TValue>)=> boolean = null) : number {\r\n        if (!predicate) {\r\n            return this.length;\r\n        }\r\n\r\n        let count: number = 0;\r\n        this.list.forEach(x => {\r\n            if(predicate(x)) {\r\n                count++;\r\n            }\r\n        });\r\n\r\n        return count;\r\n    }    \r\n}\r\n\r\nexport class KeyValuePair<TKey, TValue> {\r\n    key: TKey;\r\n    value: TValue;\r\n\r\n    constructor(key: TKey, value: TValue) {\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n}"]}