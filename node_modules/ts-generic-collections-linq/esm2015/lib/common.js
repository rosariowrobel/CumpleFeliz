/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { List } from './list';
/**
 * @template T
 */
export class Group {
    /**
     * @param {?} groups
     * @param {?} list
     */
    constructor(groups, list) {
        this.list = new List();
        this.groups = groups;
        this.list = new List(list);
    }
}
if (false) {
    /** @type {?} */
    Group.prototype.groups;
    /** @type {?} */
    Group.prototype.list;
}
/** @type {?} */
export var objCompare = (/**
 * @param {?} obj1
 * @param {?} obj2
 * @return {?}
 */
function (obj1, obj2) {
    //Loop through properties in object 1
    for (var p in obj1) {
        //Check property exists on both objects
        if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p))
            return false;
        switch (typeof (obj1[p])) {
            //Deep compare objects
            case 'object':
                if (!objCompare(obj1[p], obj2[p]))
                    return false;
                break;
            //Compare function code
            case 'function':
                if (typeof (obj2[p]) == 'undefined' || (p != 'compare' && obj1[p].toString() != obj2[p].toString()))
                    return false;
                break;
            //Compare values
            default:
                if (obj1[p] != obj2[p])
                    return false;
        }
    }
    //Check object 2 for any extra properties
    for (var p in obj2) {
        if (typeof (obj1[p]) == 'undefined')
            return false;
    }
    return true;
});
/** @type {?} */
export const ITEM_NOT_FOUND_MSG = "Item does not exist.";
/** @type {?} */
export const MULTIPLE_INSTANCES_FOUND_MSG = "Multiple instances of entity found.";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdHMtZ2VuZXJpYy1jb2xsZWN0aW9ucy1saW5xLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQzs7OztBQUU5QixNQUFNLE9BQU8sS0FBSzs7Ozs7SUFJZCxZQUFZLE1BQWEsRUFBRSxJQUFjO1FBRnpDLFNBQUksR0FBbUIsSUFBSSxJQUFJLEVBQUssQ0FBQztRQUdqQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFJLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDSjs7O0lBUEcsdUJBQWM7O0lBQ2QscUJBQXFDOzs7QUFRekMsTUFBTSxLQUFLLFVBQVU7Ozs7O0FBQUcsVUFBVSxJQUFJLEVBQUUsSUFBSTtJQUMzQyxxQ0FBcUM7SUFDckMsS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7UUFDbkIsdUNBQXVDO1FBQ3ZDLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBRXBFLFFBQVEsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3pCLHNCQUFzQjtZQUN0QixLQUFLLFFBQVE7Z0JBQ1osSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUFFLE9BQU8sS0FBSyxDQUFDO2dCQUNoRCxNQUFNO1lBQ1AsdUJBQXVCO1lBQ3ZCLEtBQUssVUFBVTtnQkFDZCxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXLElBQUksQ0FBQyxDQUFDLElBQUksU0FBUyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7b0JBQUUsT0FBTyxLQUFLLENBQUM7Z0JBQ2xILE1BQU07WUFDUCxnQkFBZ0I7WUFDaEI7Z0JBQ0MsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFBRSxPQUFPLEtBQUssQ0FBQztTQUN0QztLQUNEO0lBRUQseUNBQXlDO0lBQ3pDLEtBQUssSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO1FBQ25CLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFdBQVc7WUFBRSxPQUFPLEtBQUssQ0FBQztLQUNsRDtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBQyxDQUFBOztBQUVELE1BQU0sT0FBTyxrQkFBa0IsR0FBVyxzQkFBc0I7O0FBQ2hFLE1BQU0sT0FBTyw0QkFBNEIsR0FBVyxxQ0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRW51bWVyYWJsZSwgSUdyb3VwIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgTGlzdCB9IGZyb20gJy4vbGlzdCc7XHJcblxyXG5leHBvcnQgY2xhc3MgR3JvdXA8VD4gaW1wbGVtZW50cyBJR3JvdXA8VD4ge1xyXG4gICAgZ3JvdXBzOiBhbnlbXTtcclxuICAgIGxpc3Q6IElFbnVtZXJhYmxlPFQ+ID0gbmV3IExpc3Q8VD4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihncm91cHM6IGFueVtdLCBsaXN0OiBBcnJheTxUPikge1xyXG4gICAgICAgIHRoaXMuZ3JvdXBzID0gZ3JvdXBzO1xyXG4gICAgICAgIHRoaXMubGlzdCA9IG5ldyBMaXN0PFQ+KGxpc3QpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIG9iakNvbXBhcmUgPSBmdW5jdGlvbiAob2JqMSwgb2JqMikge1xyXG5cdC8vTG9vcCB0aHJvdWdoIHByb3BlcnRpZXMgaW4gb2JqZWN0IDFcclxuXHRmb3IgKHZhciBwIGluIG9iajEpIHtcclxuXHRcdC8vQ2hlY2sgcHJvcGVydHkgZXhpc3RzIG9uIGJvdGggb2JqZWN0c1xyXG5cdFx0aWYgKG9iajEuaGFzT3duUHJvcGVydHkocCkgIT09IG9iajIuaGFzT3duUHJvcGVydHkocCkpIHJldHVybiBmYWxzZTtcclxuIFxyXG5cdFx0c3dpdGNoICh0eXBlb2YgKG9iajFbcF0pKSB7XHJcblx0XHRcdC8vRGVlcCBjb21wYXJlIG9iamVjdHNcclxuXHRcdFx0Y2FzZSAnb2JqZWN0JzpcclxuXHRcdFx0XHRpZiAoIW9iakNvbXBhcmUob2JqMVtwXSwgb2JqMltwXSkpIHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0Ly9Db21wYXJlIGZ1bmN0aW9uIGNvZGVcclxuXHRcdFx0Y2FzZSAnZnVuY3Rpb24nOlxyXG5cdFx0XHRcdGlmICh0eXBlb2YgKG9iajJbcF0pID09ICd1bmRlZmluZWQnIHx8IChwICE9ICdjb21wYXJlJyAmJiBvYmoxW3BdLnRvU3RyaW5nKCkgIT0gb2JqMltwXS50b1N0cmluZygpKSkgcmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHQvL0NvbXBhcmUgdmFsdWVzXHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0aWYgKG9iajFbcF0gIT0gb2JqMltwXSkgcmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdH1cclxuIFxyXG5cdC8vQ2hlY2sgb2JqZWN0IDIgZm9yIGFueSBleHRyYSBwcm9wZXJ0aWVzXHJcblx0Zm9yICh2YXIgcCBpbiBvYmoyKSB7XHJcblx0XHRpZiAodHlwZW9mIChvYmoxW3BdKSA9PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHRyZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBJVEVNX05PVF9GT1VORF9NU0c6IHN0cmluZyA9IFwiSXRlbSBkb2VzIG5vdCBleGlzdC5cIjtcclxuZXhwb3J0IGNvbnN0IE1VTFRJUExFX0lOU1RBTkNFU19GT1VORF9NU0c6IHN0cmluZyA9IFwiTXVsdGlwbGUgaW5zdGFuY2VzIG9mIGVudGl0eSBmb3VuZC5cIjsiXX0=