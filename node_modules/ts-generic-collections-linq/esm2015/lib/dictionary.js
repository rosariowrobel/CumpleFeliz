/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { List } from './list';
import { Group, objCompare, ITEM_NOT_FOUND_MSG, MULTIPLE_INSTANCES_FOUND_MSG } from './common';
/**
 * @record
 * @template TKey, TValue
 */
export function IDictionary() { }
if (false) {
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    IDictionary.prototype.add = function (key, value) { };
    /**
     * @param {?} items
     * @return {?}
     */
    IDictionary.prototype.addRange = function (items) { };
    /**
     * @param {?} predicate
     * @return {?}
     */
    IDictionary.prototype.remove = function (predicate) { };
    /**
     * @return {?}
     */
    IDictionary.prototype.clear = function () { };
    /**
     * @param {?} key
     * @return {?}
     */
    IDictionary.prototype.containsKey = function (key) { };
    /**
     * @param {?} value
     * @return {?}
     */
    IDictionary.prototype.containsValue = function (value) { };
    /**
     * @param {?} key
     * @return {?}
     */
    IDictionary.prototype.tryGetValue = function (key) { };
}
/**
 * @template TKey, TValue
 */
export class Dictionary {
    /**
     * @param {?=} list
     */
    constructor(list = null) {
        this.list = new Array();
        if (list) {
            this.list = list;
        }
    }
    /* IList */
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    add(key, value) {
        /** @type {?} */
        let pair = new KeyValuePair(key, value);
        if (this.containsKey(key)) {
            throw "Duplicate key. Cannot add.";
        }
        this.list.push(pair);
    }
    /**
     * @param {?} items
     * @return {?}
     */
    addRange(items) {
        items.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => this.add(x.key, x.value)));
    }
    /**
     * @return {?}
     */
    clear() {
        this.list = new Array();
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    remove(predicate) {
        /** @type {?} */
        let temp = new Array();
        this.list.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (!predicate(element)) {
                temp.push(element);
            }
        }));
        this.list = temp;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    containsKey(key) {
        return this.any((/**
         * @param {?} x
         * @return {?}
         */
        x => objCompare(x.key, key)));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    containsValue(value) {
        return this.any((/**
         * @param {?} x
         * @return {?}
         */
        x => objCompare(x.value, value)));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    tryGetValue(key) {
        /** @type {?} */
        let item = this.singleOrDefault((/**
         * @param {?} x
         * @return {?}
         */
        x => objCompare(x.key, key)));
        if (item) {
            return item.value;
        }
        return null;
    }
    /* IEnumerable */
    /**
     * @return {?}
     */
    asEnumerable() {
        return this;
    }
    /**
     * @return {?}
     */
    get length() {
        return this.list.length;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    elementAt(index) {
        try {
            return this.list[index];
        }
        catch (e) {
            return null;
        }
    }
    /**
     * @param {?=} predicate
     * @return {?}
     */
    any(predicate) {
        if (!predicate) {
            return this.list.length > 0;
        }
        for (let i = 0; i < this.list.length; i++) {
            if (predicate(this.list[i])) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?=} predicate
     * @return {?}
     */
    all(predicate) {
        if (!predicate) {
            return this.list.length > 0;
        }
        for (let i = 0; i < this.list.length; i++) {
            if (!predicate(this.list[i])) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?=} predicate
     * @return {?}
     */
    single(predicate = null) {
        if (this.list.length <= 0) {
            throw ITEM_NOT_FOUND_MSG;
        }
        if (predicate) {
            /** @type {?} */
            let item = this.singleOrDefault(predicate);
            if (!item) {
                throw ITEM_NOT_FOUND_MSG;
            }
            return item;
        }
        return this.list[0];
    }
    /**
     * @param {?=} predicate
     * @return {?}
     */
    first(predicate = null) {
        if (this.list.length <= 0) {
            throw ITEM_NOT_FOUND_MSG;
        }
        if (predicate) {
            /** @type {?} */
            let item = this.firstOrDefault(predicate);
            if (!item) {
                throw ITEM_NOT_FOUND_MSG;
            }
            return item;
        }
        return this.list[0];
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    last(predicate) {
        if (this.list.length <= 0) {
            throw ITEM_NOT_FOUND_MSG;
        }
        if (predicate) {
            /** @type {?} */
            let item = this.lastOrDefault(predicate);
            if (!item) {
                throw ITEM_NOT_FOUND_MSG;
            }
            return item;
        }
        return this.list[this.list.length - 1];
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    singleOrDefault(predicate) {
        /** @type {?} */
        let temp = new Array();
        this.list.filter((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (predicate(element)) {
                temp.push(element);
            }
        }));
        if (temp.length > 1) {
            throw MULTIPLE_INSTANCES_FOUND_MSG;
        }
        if (temp.length <= 0) {
            return null;
        }
        return temp[0];
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    firstOrDefault(predicate) {
        for (let i = 0; i < this.length; i++) {
            /** @type {?} */
            let item = this.list[i];
            if (predicate(item)) {
                return item;
            }
        }
        return null;
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    lastOrDefault(predicate) {
        for (let i = this.length; i >= 0; i--) {
            /** @type {?} */
            let item = this.list[i - 1];
            if (predicate(item)) {
                return item;
            }
        }
        return null;
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    where(predicate) {
        /** @type {?} */
        let temp = new Dictionary();
        this.list.filter((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (predicate(element)) {
                temp.add(element.key, element.value);
            }
        }));
        return temp;
    }
    /**
     * @template TResult
     * @param {?} predicate
     * @return {?}
     */
    select(predicate) {
        /** @type {?} */
        let temp = new List();
        this.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => temp.add(predicate(x))));
        return temp;
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    forEach(predicate) {
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => predicate(x)));
    }
    /**
     * @return {?}
     */
    toArray() {
        return this.list;
    }
    /**
     * @template TOuter, TMatch, TResult
     * @param {?} outer
     * @param {?} conditionInner
     * @param {?} conditionOuter
     * @param {?} select
     * @param {?=} leftJoin
     * @return {?}
     */
    join(outer, conditionInner, conditionOuter, select, leftJoin = false) {
        /** @type {?} */
        let resultList = new List();
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            /** @type {?} */
            let outerEntries = outer.toArray().filter((/**
             * @param {?} y
             * @return {?}
             */
            y => conditionInner(x) === conditionOuter(y)));
            if (leftJoin && outerEntries && outerEntries.length <= 0) {
                resultList.add(select(x, null));
            }
            else {
                outerEntries.forEach((/**
                 * @param {?} z
                 * @return {?}
                 */
                z => resultList.add(select(x, z))));
            }
        }));
        return resultList;
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    groupBy(predicate) {
        /** @type {?} */
        let groups = {};
        this.list.forEach((/**
         * @param {?} o
         * @return {?}
         */
        function (o) {
            /** @type {?} */
            var group = JSON.stringify(predicate(o));
            groups[group] = groups[group] || [];
            groups[group].push(o);
        }));
        /** @type {?} */
        let g = Object.keys(groups).map((/**
         * @param {?} group
         * @return {?}
         */
        function (group) {
            /** @type {?} */
            let a = group.substr(1, group.length - 2);
            /** @type {?} */
            let grp = new Group(a.split(','), groups[group]);
            return grp;
        }));
        return new List(g);
    }
    /**
     * @param {?} comparer
     * @return {?}
     */
    orderBy(comparer) {
        /** @type {?} */
        let temp = this.list.sort((/**
         * @param {?} x
         * @param {?} y
         * @return {?}
         */
        (x, y) => comparer.compare(x, y)));
        return new List(temp);
    }
    /**
     * @param {?} comparer
     * @return {?}
     */
    distinct(comparer) {
        /** @type {?} */
        let uniques = new List();
        this.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            uniques.forEach((/**
             * @param {?} y
             * @return {?}
             */
            y => {
                if (!comparer.equals(x, y)) {
                    uniques.add(x);
                }
            }));
        }));
        return uniques;
    }
    /**
     * @param {?} list
     * @return {?}
     */
    union(list) {
        this.addRange(list.toArray());
        return this;
    }
    /**
     * @param {?} no
     * @return {?}
     */
    skip(no) {
        if (no > 0) {
            return new Dictionary(this.list.slice(no, this.list.length - 1));
        }
        return this;
    }
    /**
     * @param {?} no
     * @return {?}
     */
    take(no) {
        if (no > 0) {
            return new Dictionary(this.list.slice(0, no));
        }
        return this;
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    sum(predicate) {
        /** @type {?} */
        let sum = 0;
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => sum = sum + predicate(x)));
        return sum;
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    avg(predicate) {
        return this.sum(predicate) / this.length;
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    min(predicate) {
        /** @type {?} */
        let min = 0;
        /** @type {?} */
        let i = 0;
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            if (i == 0) {
                min = predicate(x);
            }
            else {
                /** @type {?} */
                let val = predicate(x);
                if (val < min) {
                    min = val;
                }
            }
            i++;
        }));
        return min;
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    max(predicate) {
        /** @type {?} */
        let max = 0;
        /** @type {?} */
        let i = 0;
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            if (i == 0) {
                max = predicate(x);
            }
            else {
                /** @type {?} */
                let val = predicate(x);
                if (val > max) {
                    max = val;
                }
            }
            i++;
        }));
        return max;
    }
    /**
     * @param {?=} predicate
     * @return {?}
     */
    count(predicate = null) {
        if (!predicate) {
            return this.length;
        }
        /** @type {?} */
        let count = 0;
        this.list.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            if (predicate(x)) {
                count++;
            }
        }));
        return count;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    Dictionary.prototype.list;
}
/**
 * @template TKey, TValue
 */
export class KeyValuePair {
    /**
     * @param {?} key
     * @param {?} value
     */
    constructor(key, value) {
        this.key = key;
        this.value = value;
    }
}
if (false) {
    /** @type {?} */
    KeyValuePair.prototype.key;
    /** @type {?} */
    KeyValuePair.prototype.value;
}
//# sourceMappingURL=data:application/json;base64,